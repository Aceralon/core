// Code generated by protoc-gen-go. DO NOT EDIT.
// source: core.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	core.proto

It has these top-level messages:
	Empty
	ListContainersOptions
	DeployStatusOptions
	DeployStatusMessage
	Pod
	Pods
	PodResource
	ListNetworkOptions
	Network
	Networks
	Node
	Nodes
	NodeAvailable
	Container
	ContainerDeployedOptions
	Containers
	ContainerID
	ContainerIDs
	RemoveContainerOptions
	ReallocOptions
	AddPodOptions
	RemovePodOptions
	GetPodOptions
	AddNodeOptions
	RemoveNodeOptions
	GetNodeOptions
	ListNodesOptions
	Build
	Builds
	BuildImageOptions
	HookOptions
	HealthCheckOptions
	LogOptions
	EntrypointOptions
	DeployOptions
	ReplaceOptions
	CacheImageOptions
	RemoveImageOptions
	CopyPaths
	CopyOptions
	ErrorDetail
	BuildImageMessage
	CreateContainerMessage
	ReplaceContainerMessage
	RunAndWaitMessage
	CacheImageMessage
	RemoveImageMessage
	RemoveContainerMessage
	ReallocResourceMessage
	CopyMessage
	RunAndWaitOptions
	ControlContainerOptions
	ControlContainerMessage
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ListContainersOptions struct {
	Appname    string            `protobuf:"bytes,1,opt,name=appname" json:"appname,omitempty"`
	Entrypoint string            `protobuf:"bytes,2,opt,name=entrypoint" json:"entrypoint,omitempty"`
	Nodename   string            `protobuf:"bytes,3,opt,name=nodename" json:"nodename,omitempty"`
	Labels     map[string]string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ListContainersOptions) Reset()                    { *m = ListContainersOptions{} }
func (m *ListContainersOptions) String() string            { return proto.CompactTextString(m) }
func (*ListContainersOptions) ProtoMessage()               {}
func (*ListContainersOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListContainersOptions) GetAppname() string {
	if m != nil {
		return m.Appname
	}
	return ""
}

func (m *ListContainersOptions) GetEntrypoint() string {
	if m != nil {
		return m.Entrypoint
	}
	return ""
}

func (m *ListContainersOptions) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *ListContainersOptions) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type DeployStatusOptions struct {
	Appname    string `protobuf:"bytes,1,opt,name=appname" json:"appname,omitempty"`
	Entrypoint string `protobuf:"bytes,2,opt,name=entrypoint" json:"entrypoint,omitempty"`
	Nodename   string `protobuf:"bytes,3,opt,name=nodename" json:"nodename,omitempty"`
}

func (m *DeployStatusOptions) Reset()                    { *m = DeployStatusOptions{} }
func (m *DeployStatusOptions) String() string            { return proto.CompactTextString(m) }
func (*DeployStatusOptions) ProtoMessage()               {}
func (*DeployStatusOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeployStatusOptions) GetAppname() string {
	if m != nil {
		return m.Appname
	}
	return ""
}

func (m *DeployStatusOptions) GetEntrypoint() string {
	if m != nil {
		return m.Entrypoint
	}
	return ""
}

func (m *DeployStatusOptions) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

type DeployStatusMessage struct {
	Action     string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Appname    string `protobuf:"bytes,2,opt,name=appname" json:"appname,omitempty"`
	Entrypoint string `protobuf:"bytes,3,opt,name=entrypoint" json:"entrypoint,omitempty"`
	Nodename   string `protobuf:"bytes,4,opt,name=nodename" json:"nodename,omitempty"`
	Id         string `protobuf:"bytes,5,opt,name=id" json:"id,omitempty"`
	Data       []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DeployStatusMessage) Reset()                    { *m = DeployStatusMessage{} }
func (m *DeployStatusMessage) String() string            { return proto.CompactTextString(m) }
func (*DeployStatusMessage) ProtoMessage()               {}
func (*DeployStatusMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeployStatusMessage) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *DeployStatusMessage) GetAppname() string {
	if m != nil {
		return m.Appname
	}
	return ""
}

func (m *DeployStatusMessage) GetEntrypoint() string {
	if m != nil {
		return m.Entrypoint
	}
	return ""
}

func (m *DeployStatusMessage) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *DeployStatusMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeployStatusMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 对的, protobuf 就是这样...
type Pod struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Desc  string `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
	Favor string `protobuf:"bytes,3,opt,name=favor" json:"favor,omitempty"`
}

func (m *Pod) Reset()                    { *m = Pod{} }
func (m *Pod) String() string            { return proto.CompactTextString(m) }
func (*Pod) ProtoMessage()               {}
func (*Pod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Pod) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pod) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Pod) GetFavor() string {
	if m != nil {
		return m.Favor
	}
	return ""
}

type Pods struct {
	Pods []*Pod `protobuf:"bytes,1,rep,name=pods" json:"pods,omitempty"`
}

func (m *Pods) Reset()                    { *m = Pods{} }
func (m *Pods) String() string            { return proto.CompactTextString(m) }
func (*Pods) ProtoMessage()               {}
func (*Pods) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Pods) GetPods() []*Pod {
	if m != nil {
		return m.Pods
	}
	return nil
}

type PodResource struct {
	Name   string             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Cpu    map[string]float64 `protobuf:"bytes,2,rep,name=cpu" json:"cpu,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Memory map[string]float64 `protobuf:"bytes,3,rep,name=memory" json:"memory,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Diff   map[string]bool    `protobuf:"bytes,4,rep,name=diff" json:"diff,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Detail map[string]string  `protobuf:"bytes,5,rep,name=detail" json:"detail,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PodResource) Reset()                    { *m = PodResource{} }
func (m *PodResource) String() string            { return proto.CompactTextString(m) }
func (*PodResource) ProtoMessage()               {}
func (*PodResource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PodResource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PodResource) GetCpu() map[string]float64 {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *PodResource) GetMemory() map[string]float64 {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *PodResource) GetDiff() map[string]bool {
	if m != nil {
		return m.Diff
	}
	return nil
}

func (m *PodResource) GetDetail() map[string]string {
	if m != nil {
		return m.Detail
	}
	return nil
}

type ListNetworkOptions struct {
	Podname string `protobuf:"bytes,1,opt,name=podname" json:"podname,omitempty"`
	Driver  string `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
}

func (m *ListNetworkOptions) Reset()                    { *m = ListNetworkOptions{} }
func (m *ListNetworkOptions) String() string            { return proto.CompactTextString(m) }
func (*ListNetworkOptions) ProtoMessage()               {}
func (*ListNetworkOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListNetworkOptions) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *ListNetworkOptions) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

type Network struct {
	Name    string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Subnets []string `protobuf:"bytes,2,rep,name=subnets" json:"subnets,omitempty"`
}

func (m *Network) Reset()                    { *m = Network{} }
func (m *Network) String() string            { return proto.CompactTextString(m) }
func (*Network) ProtoMessage()               {}
func (*Network) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Network) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Network) GetSubnets() []string {
	if m != nil {
		return m.Subnets
	}
	return nil
}

type Networks struct {
	Networks []*Network `protobuf:"bytes,1,rep,name=networks" json:"networks,omitempty"`
}

func (m *Networks) Reset()                    { *m = Networks{} }
func (m *Networks) String() string            { return proto.CompactTextString(m) }
func (*Networks) ProtoMessage()               {}
func (*Networks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Networks) GetNetworks() []*Network {
	if m != nil {
		return m.Networks
	}
	return nil
}

type Node struct {
	Name       string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Endpoint   string            `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	Podname    string            `protobuf:"bytes,3,opt,name=podname" json:"podname,omitempty"`
	Cpu        map[string]int32  `protobuf:"bytes,4,rep,name=cpu" json:"cpu,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	CpuUsed    float64           `protobuf:"fixed64,5,opt,name=cpu_used,json=cpuUsed" json:"cpu_used,omitempty"`
	Memory     int64             `protobuf:"varint,6,opt,name=memory" json:"memory,omitempty"`
	MemoryUsed int64             `protobuf:"varint,7,opt,name=memory_used,json=memoryUsed" json:"memory_used,omitempty"`
	Available  bool              `protobuf:"varint,8,opt,name=available" json:"available,omitempty"`
	Labels     map[string]string `protobuf:"bytes,9,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	InitMemory int64             `protobuf:"varint,10,opt,name=init_memory,json=initMemory" json:"init_memory,omitempty"`
	InitCpu    map[string]int32  `protobuf:"bytes,11,rep,name=init_cpu,json=initCpu" json:"init_cpu,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Info       string            `protobuf:"bytes,12,opt,name=info" json:"info,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Node) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *Node) GetCpu() map[string]int32 {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *Node) GetCpuUsed() float64 {
	if m != nil {
		return m.CpuUsed
	}
	return 0
}

func (m *Node) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *Node) GetMemoryUsed() int64 {
	if m != nil {
		return m.MemoryUsed
	}
	return 0
}

func (m *Node) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *Node) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Node) GetInitMemory() int64 {
	if m != nil {
		return m.InitMemory
	}
	return 0
}

func (m *Node) GetInitCpu() map[string]int32 {
	if m != nil {
		return m.InitCpu
	}
	return nil
}

func (m *Node) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type Nodes struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *Nodes) Reset()                    { *m = Nodes{} }
func (m *Nodes) String() string            { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()               {}
func (*Nodes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Nodes) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type NodeAvailable struct {
	Nodename  string `protobuf:"bytes,1,opt,name=nodename" json:"nodename,omitempty"`
	Podname   string `protobuf:"bytes,2,opt,name=podname" json:"podname,omitempty"`
	Available bool   `protobuf:"varint,3,opt,name=available" json:"available,omitempty"`
}

func (m *NodeAvailable) Reset()                    { *m = NodeAvailable{} }
func (m *NodeAvailable) String() string            { return proto.CompactTextString(m) }
func (*NodeAvailable) ProtoMessage()               {}
func (*NodeAvailable) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *NodeAvailable) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *NodeAvailable) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *NodeAvailable) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

type Container struct {
	Id         string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Podname    string            `protobuf:"bytes,2,opt,name=podname" json:"podname,omitempty"`
	Nodename   string            `protobuf:"bytes,3,opt,name=nodename" json:"nodename,omitempty"`
	Name       string            `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Cpu        map[string]int32  `protobuf:"bytes,5,rep,name=cpu" json:"cpu,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Quota      float64           `protobuf:"fixed64,6,opt,name=quota" json:"quota,omitempty"`
	Memory     int64             `protobuf:"varint,7,opt,name=memory" json:"memory,omitempty"`
	Privileged bool              `protobuf:"varint,8,opt,name=privileged" json:"privileged,omitempty"`
	Labels     map[string]string `protobuf:"bytes,9,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Publish    map[string]string `protobuf:"bytes,10,rep,name=publish" json:"publish,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Image      string            `protobuf:"bytes,11,opt,name=image" json:"image,omitempty"`
	Inspect    []byte            `protobuf:"bytes,12,opt,name=inspect,proto3" json:"inspect,omitempty"`
	StatusData []byte            `protobuf:"bytes,13,opt,name=status_data,json=statusData,proto3" json:"status_data,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Container) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Container) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *Container) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *Container) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Container) GetCpu() map[string]int32 {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *Container) GetQuota() float64 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *Container) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *Container) GetPrivileged() bool {
	if m != nil {
		return m.Privileged
	}
	return false
}

func (m *Container) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Container) GetPublish() map[string]string {
	if m != nil {
		return m.Publish
	}
	return nil
}

func (m *Container) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Container) GetInspect() []byte {
	if m != nil {
		return m.Inspect
	}
	return nil
}

func (m *Container) GetStatusData() []byte {
	if m != nil {
		return m.StatusData
	}
	return nil
}

type ContainerDeployedOptions struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Appname    string `protobuf:"bytes,2,opt,name=appname" json:"appname,omitempty"`
	Entrypoint string `protobuf:"bytes,3,opt,name=entrypoint" json:"entrypoint,omitempty"`
	Nodename   string `protobuf:"bytes,4,opt,name=nodename" json:"nodename,omitempty"`
	Data       []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ContainerDeployedOptions) Reset()                    { *m = ContainerDeployedOptions{} }
func (m *ContainerDeployedOptions) String() string            { return proto.CompactTextString(m) }
func (*ContainerDeployedOptions) ProtoMessage()               {}
func (*ContainerDeployedOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ContainerDeployedOptions) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ContainerDeployedOptions) GetAppname() string {
	if m != nil {
		return m.Appname
	}
	return ""
}

func (m *ContainerDeployedOptions) GetEntrypoint() string {
	if m != nil {
		return m.Entrypoint
	}
	return ""
}

func (m *ContainerDeployedOptions) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *ContainerDeployedOptions) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Containers struct {
	Containers []*Container `protobuf:"bytes,1,rep,name=containers" json:"containers,omitempty"`
}

func (m *Containers) Reset()                    { *m = Containers{} }
func (m *Containers) String() string            { return proto.CompactTextString(m) }
func (*Containers) ProtoMessage()               {}
func (*Containers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Containers) GetContainers() []*Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

type ContainerID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ContainerID) Reset()                    { *m = ContainerID{} }
func (m *ContainerID) String() string            { return proto.CompactTextString(m) }
func (*ContainerID) ProtoMessage()               {}
func (*ContainerID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ContainerID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ContainerIDs struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *ContainerIDs) Reset()                    { *m = ContainerIDs{} }
func (m *ContainerIDs) String() string            { return proto.CompactTextString(m) }
func (*ContainerIDs) ProtoMessage()               {}
func (*ContainerIDs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ContainerIDs) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type RemoveContainerOptions struct {
	Ids   []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	Force bool     `protobuf:"varint,2,opt,name=force" json:"force,omitempty"`
}

func (m *RemoveContainerOptions) Reset()                    { *m = RemoveContainerOptions{} }
func (m *RemoveContainerOptions) String() string            { return proto.CompactTextString(m) }
func (*RemoveContainerOptions) ProtoMessage()               {}
func (*RemoveContainerOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *RemoveContainerOptions) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *RemoveContainerOptions) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type ReallocOptions struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	Cpu float64  `protobuf:"fixed64,2,opt,name=cpu" json:"cpu,omitempty"`
	Mem int64    `protobuf:"varint,3,opt,name=mem" json:"mem,omitempty"`
}

func (m *ReallocOptions) Reset()                    { *m = ReallocOptions{} }
func (m *ReallocOptions) String() string            { return proto.CompactTextString(m) }
func (*ReallocOptions) ProtoMessage()               {}
func (*ReallocOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ReallocOptions) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ReallocOptions) GetCpu() float64 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *ReallocOptions) GetMem() int64 {
	if m != nil {
		return m.Mem
	}
	return 0
}

type AddPodOptions struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Favor string `protobuf:"bytes,2,opt,name=favor" json:"favor,omitempty"`
	Desc  string `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
}

func (m *AddPodOptions) Reset()                    { *m = AddPodOptions{} }
func (m *AddPodOptions) String() string            { return proto.CompactTextString(m) }
func (*AddPodOptions) ProtoMessage()               {}
func (*AddPodOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *AddPodOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddPodOptions) GetFavor() string {
	if m != nil {
		return m.Favor
	}
	return ""
}

func (m *AddPodOptions) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type RemovePodOptions struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *RemovePodOptions) Reset()                    { *m = RemovePodOptions{} }
func (m *RemovePodOptions) String() string            { return proto.CompactTextString(m) }
func (*RemovePodOptions) ProtoMessage()               {}
func (*RemovePodOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *RemovePodOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetPodOptions struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetPodOptions) Reset()                    { *m = GetPodOptions{} }
func (m *GetPodOptions) String() string            { return proto.CompactTextString(m) }
func (*GetPodOptions) ProtoMessage()               {}
func (*GetPodOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetPodOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AddNodeOptions struct {
	Nodename string            `protobuf:"bytes,1,opt,name=nodename" json:"nodename,omitempty"`
	Endpoint string            `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	Podname  string            `protobuf:"bytes,3,opt,name=podname" json:"podname,omitempty"`
	Ca       string            `protobuf:"bytes,4,opt,name=ca" json:"ca,omitempty"`
	Cert     string            `protobuf:"bytes,5,opt,name=cert" json:"cert,omitempty"`
	Key      string            `protobuf:"bytes,6,opt,name=key" json:"key,omitempty"`
	Cpu      int32             `protobuf:"varint,7,opt,name=cpu" json:"cpu,omitempty"`
	Share    int32             `protobuf:"varint,8,opt,name=share" json:"share,omitempty"`
	Memory   int64             `protobuf:"varint,9,opt,name=memory" json:"memory,omitempty"`
	Labels   map[string]string `protobuf:"bytes,10,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AddNodeOptions) Reset()                    { *m = AddNodeOptions{} }
func (m *AddNodeOptions) String() string            { return proto.CompactTextString(m) }
func (*AddNodeOptions) ProtoMessage()               {}
func (*AddNodeOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *AddNodeOptions) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *AddNodeOptions) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *AddNodeOptions) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *AddNodeOptions) GetCa() string {
	if m != nil {
		return m.Ca
	}
	return ""
}

func (m *AddNodeOptions) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

func (m *AddNodeOptions) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AddNodeOptions) GetCpu() int32 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *AddNodeOptions) GetShare() int32 {
	if m != nil {
		return m.Share
	}
	return 0
}

func (m *AddNodeOptions) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *AddNodeOptions) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type RemoveNodeOptions struct {
	Nodename string `protobuf:"bytes,1,opt,name=nodename" json:"nodename,omitempty"`
	Podname  string `protobuf:"bytes,2,opt,name=podname" json:"podname,omitempty"`
}

func (m *RemoveNodeOptions) Reset()                    { *m = RemoveNodeOptions{} }
func (m *RemoveNodeOptions) String() string            { return proto.CompactTextString(m) }
func (*RemoveNodeOptions) ProtoMessage()               {}
func (*RemoveNodeOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *RemoveNodeOptions) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *RemoveNodeOptions) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

type GetNodeOptions struct {
	Podname  string `protobuf:"bytes,1,opt,name=podname" json:"podname,omitempty"`
	Nodename string `protobuf:"bytes,2,opt,name=nodename" json:"nodename,omitempty"`
}

func (m *GetNodeOptions) Reset()                    { *m = GetNodeOptions{} }
func (m *GetNodeOptions) String() string            { return proto.CompactTextString(m) }
func (*GetNodeOptions) ProtoMessage()               {}
func (*GetNodeOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetNodeOptions) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *GetNodeOptions) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

type ListNodesOptions struct {
	Podname string `protobuf:"bytes,1,opt,name=podname" json:"podname,omitempty"`
	All     bool   `protobuf:"varint,2,opt,name=all" json:"all,omitempty"`
}

func (m *ListNodesOptions) Reset()                    { *m = ListNodesOptions{} }
func (m *ListNodesOptions) String() string            { return proto.CompactTextString(m) }
func (*ListNodesOptions) ProtoMessage()               {}
func (*ListNodesOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ListNodesOptions) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *ListNodesOptions) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type Build struct {
	Base      string            `protobuf:"bytes,1,opt,name=base" json:"base,omitempty"`
	Repo      string            `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
	Version   string            `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Dir       string            `protobuf:"bytes,4,opt,name=dir" json:"dir,omitempty"`
	Submodule bool              `protobuf:"varint,5,opt,name=submodule" json:"submodule,omitempty"`
	Commands  []string          `protobuf:"bytes,6,rep,name=commands" json:"commands,omitempty"`
	Envs      map[string]string `protobuf:"bytes,7,rep,name=envs" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Args      map[string]string `protobuf:"bytes,8,rep,name=args" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Labels    map[string]string `protobuf:"bytes,9,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Artifacts map[string]string `protobuf:"bytes,10,rep,name=artifacts" json:"artifacts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Cache     map[string]string `protobuf:"bytes,11,rep,name=cache" json:"cache,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Build) Reset()                    { *m = Build{} }
func (m *Build) String() string            { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()               {}
func (*Build) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *Build) GetBase() string {
	if m != nil {
		return m.Base
	}
	return ""
}

func (m *Build) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *Build) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Build) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *Build) GetSubmodule() bool {
	if m != nil {
		return m.Submodule
	}
	return false
}

func (m *Build) GetCommands() []string {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *Build) GetEnvs() map[string]string {
	if m != nil {
		return m.Envs
	}
	return nil
}

func (m *Build) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Build) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Build) GetArtifacts() map[string]string {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

func (m *Build) GetCache() map[string]string {
	if m != nil {
		return m.Cache
	}
	return nil
}

type Builds struct {
	Stages []string          `protobuf:"bytes,1,rep,name=stages" json:"stages,omitempty"`
	Builds map[string]*Build `protobuf:"bytes,2,rep,name=builds" json:"builds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Builds) Reset()                    { *m = Builds{} }
func (m *Builds) String() string            { return proto.CompactTextString(m) }
func (*Builds) ProtoMessage()               {}
func (*Builds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *Builds) GetStages() []string {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (m *Builds) GetBuilds() map[string]*Build {
	if m != nil {
		return m.Builds
	}
	return nil
}

type BuildImageOptions struct {
	Name   string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	User   string   `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Uid    int32    `protobuf:"varint,3,opt,name=uid" json:"uid,omitempty"`
	Tags   []string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	Builds *Builds  `protobuf:"bytes,5,opt,name=builds" json:"builds,omitempty"`
	Tar    []byte   `protobuf:"bytes,6,opt,name=tar,proto3" json:"tar,omitempty"`
}

func (m *BuildImageOptions) Reset()                    { *m = BuildImageOptions{} }
func (m *BuildImageOptions) String() string            { return proto.CompactTextString(m) }
func (*BuildImageOptions) ProtoMessage()               {}
func (*BuildImageOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *BuildImageOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BuildImageOptions) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *BuildImageOptions) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *BuildImageOptions) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *BuildImageOptions) GetBuilds() *Builds {
	if m != nil {
		return m.Builds
	}
	return nil
}

func (m *BuildImageOptions) GetTar() []byte {
	if m != nil {
		return m.Tar
	}
	return nil
}

type HookOptions struct {
	AfterStart []string `protobuf:"bytes,1,rep,name=after_start,json=afterStart" json:"after_start,omitempty"`
	BeforeStop []string `protobuf:"bytes,2,rep,name=before_stop,json=beforeStop" json:"before_stop,omitempty"`
	Force      bool     `protobuf:"varint,3,opt,name=force" json:"force,omitempty"`
}

func (m *HookOptions) Reset()                    { *m = HookOptions{} }
func (m *HookOptions) String() string            { return proto.CompactTextString(m) }
func (*HookOptions) ProtoMessage()               {}
func (*HookOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *HookOptions) GetAfterStart() []string {
	if m != nil {
		return m.AfterStart
	}
	return nil
}

func (m *HookOptions) GetBeforeStop() []string {
	if m != nil {
		return m.BeforeStop
	}
	return nil
}

func (m *HookOptions) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type HealthCheckOptions struct {
	TcpPorts []string `protobuf:"bytes,1,rep,name=tcp_ports,json=tcpPorts" json:"tcp_ports,omitempty"`
	HttpPort string   `protobuf:"bytes,2,opt,name=http_port,json=httpPort" json:"http_port,omitempty"`
	Url      string   `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Code     int32    `protobuf:"varint,4,opt,name=code" json:"code,omitempty"`
}

func (m *HealthCheckOptions) Reset()                    { *m = HealthCheckOptions{} }
func (m *HealthCheckOptions) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckOptions) ProtoMessage()               {}
func (*HealthCheckOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *HealthCheckOptions) GetTcpPorts() []string {
	if m != nil {
		return m.TcpPorts
	}
	return nil
}

func (m *HealthCheckOptions) GetHttpPort() string {
	if m != nil {
		return m.HttpPort
	}
	return ""
}

func (m *HealthCheckOptions) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HealthCheckOptions) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type LogOptions struct {
	Type   string            `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Config map[string]string `protobuf:"bytes,2,rep,name=config" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *LogOptions) Reset()                    { *m = LogOptions{} }
func (m *LogOptions) String() string            { return proto.CompactTextString(m) }
func (*LogOptions) ProtoMessage()               {}
func (*LogOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *LogOptions) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LogOptions) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

type EntrypointOptions struct {
	Name          string              `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Command       string              `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	Privileged    bool                `protobuf:"varint,3,opt,name=privileged" json:"privileged,omitempty"`
	Dir           string              `protobuf:"bytes,4,opt,name=dir" json:"dir,omitempty"`
	Log           *LogOptions         `protobuf:"bytes,5,opt,name=log" json:"log,omitempty"`
	Publish       []string            `protobuf:"bytes,6,rep,name=publish" json:"publish,omitempty"`
	Healthcheck   *HealthCheckOptions `protobuf:"bytes,7,opt,name=healthcheck" json:"healthcheck,omitempty"`
	Hook          *HookOptions        `protobuf:"bytes,8,opt,name=hook" json:"hook,omitempty"`
	RestartPolicy string              `protobuf:"bytes,9,opt,name=restart_policy,json=restartPolicy" json:"restart_policy,omitempty"`
	Sysctls       map[string]string   `protobuf:"bytes,10,rep,name=sysctls" json:"sysctls,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EntrypointOptions) Reset()                    { *m = EntrypointOptions{} }
func (m *EntrypointOptions) String() string            { return proto.CompactTextString(m) }
func (*EntrypointOptions) ProtoMessage()               {}
func (*EntrypointOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *EntrypointOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EntrypointOptions) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *EntrypointOptions) GetPrivileged() bool {
	if m != nil {
		return m.Privileged
	}
	return false
}

func (m *EntrypointOptions) GetDir() string {
	if m != nil {
		return m.Dir
	}
	return ""
}

func (m *EntrypointOptions) GetLog() *LogOptions {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *EntrypointOptions) GetPublish() []string {
	if m != nil {
		return m.Publish
	}
	return nil
}

func (m *EntrypointOptions) GetHealthcheck() *HealthCheckOptions {
	if m != nil {
		return m.Healthcheck
	}
	return nil
}

func (m *EntrypointOptions) GetHook() *HookOptions {
	if m != nil {
		return m.Hook
	}
	return nil
}

func (m *EntrypointOptions) GetRestartPolicy() string {
	if m != nil {
		return m.RestartPolicy
	}
	return ""
}

func (m *EntrypointOptions) GetSysctls() map[string]string {
	if m != nil {
		return m.Sysctls
	}
	return nil
}

type DeployOptions struct {
	Name         string             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Entrypoint   *EntrypointOptions `protobuf:"bytes,2,opt,name=entrypoint" json:"entrypoint,omitempty"`
	Podname      string             `protobuf:"bytes,3,opt,name=podname" json:"podname,omitempty"`
	Nodename     string             `protobuf:"bytes,4,opt,name=nodename" json:"nodename,omitempty"`
	Image        string             `protobuf:"bytes,5,opt,name=image" json:"image,omitempty"`
	ExtraArgs    string             `protobuf:"bytes,6,opt,name=extra_args,json=extraArgs" json:"extra_args,omitempty"`
	CpuQuota     float64            `protobuf:"fixed64,7,opt,name=cpu_quota,json=cpuQuota" json:"cpu_quota,omitempty"`
	Memory       int64              `protobuf:"varint,8,opt,name=memory" json:"memory,omitempty"`
	Count        int32              `protobuf:"varint,9,opt,name=count" json:"count,omitempty"`
	Env          []string           `protobuf:"bytes,10,rep,name=env" json:"env,omitempty"`
	Dns          []string           `protobuf:"bytes,11,rep,name=dns" json:"dns,omitempty"`
	ExtraHosts   []string           `protobuf:"bytes,12,rep,name=extra_hosts,json=extraHosts" json:"extra_hosts,omitempty"`
	Volumes      []string           `protobuf:"bytes,13,rep,name=volumes" json:"volumes,omitempty"`
	Networks     map[string]string  `protobuf:"bytes,14,rep,name=networks" json:"networks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Networkmode  string             `protobuf:"bytes,15,opt,name=networkmode" json:"networkmode,omitempty"`
	User         string             `protobuf:"bytes,16,opt,name=user" json:"user,omitempty"`
	Debug        bool               `protobuf:"varint,17,opt,name=debug" json:"debug,omitempty"`
	OpenStdin    bool               `protobuf:"varint,18,opt,name=openStdin" json:"openStdin,omitempty"`
	Labels       map[string]string  `protobuf:"bytes,19,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Nodelabels   map[string]string  `protobuf:"bytes,20,rep,name=nodelabels" json:"nodelabels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DeployMethod string             `protobuf:"bytes,21,opt,name=deploy_method,json=deployMethod" json:"deploy_method,omitempty"`
	Data         map[string][]byte  `protobuf:"bytes,22,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Softlimit    bool               `protobuf:"varint,23,opt,name=softlimit" json:"softlimit,omitempty"`
	NodesLimit   int32              `protobuf:"varint,24,opt,name=nodes_limit,json=nodesLimit" json:"nodes_limit,omitempty"`
}

func (m *DeployOptions) Reset()                    { *m = DeployOptions{} }
func (m *DeployOptions) String() string            { return proto.CompactTextString(m) }
func (*DeployOptions) ProtoMessage()               {}
func (*DeployOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *DeployOptions) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeployOptions) GetEntrypoint() *EntrypointOptions {
	if m != nil {
		return m.Entrypoint
	}
	return nil
}

func (m *DeployOptions) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *DeployOptions) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *DeployOptions) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *DeployOptions) GetExtraArgs() string {
	if m != nil {
		return m.ExtraArgs
	}
	return ""
}

func (m *DeployOptions) GetCpuQuota() float64 {
	if m != nil {
		return m.CpuQuota
	}
	return 0
}

func (m *DeployOptions) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *DeployOptions) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DeployOptions) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *DeployOptions) GetDns() []string {
	if m != nil {
		return m.Dns
	}
	return nil
}

func (m *DeployOptions) GetExtraHosts() []string {
	if m != nil {
		return m.ExtraHosts
	}
	return nil
}

func (m *DeployOptions) GetVolumes() []string {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *DeployOptions) GetNetworks() map[string]string {
	if m != nil {
		return m.Networks
	}
	return nil
}

func (m *DeployOptions) GetNetworkmode() string {
	if m != nil {
		return m.Networkmode
	}
	return ""
}

func (m *DeployOptions) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *DeployOptions) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

func (m *DeployOptions) GetOpenStdin() bool {
	if m != nil {
		return m.OpenStdin
	}
	return false
}

func (m *DeployOptions) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *DeployOptions) GetNodelabels() map[string]string {
	if m != nil {
		return m.Nodelabels
	}
	return nil
}

func (m *DeployOptions) GetDeployMethod() string {
	if m != nil {
		return m.DeployMethod
	}
	return ""
}

func (m *DeployOptions) GetData() map[string][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DeployOptions) GetSoftlimit() bool {
	if m != nil {
		return m.Softlimit
	}
	return false
}

func (m *DeployOptions) GetNodesLimit() int32 {
	if m != nil {
		return m.NodesLimit
	}
	return 0
}

type ReplaceOptions struct {
	DeployOpt      *DeployOptions    `protobuf:"bytes,1,opt,name=deployOpt" json:"deployOpt,omitempty"`
	Force          bool              `protobuf:"varint,2,opt,name=force" json:"force,omitempty"`
	FilterLabels   map[string]string `protobuf:"bytes,3,rep,name=filter_labels,json=filterLabels" json:"filter_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Copy           map[string]string `protobuf:"bytes,4,rep,name=copy" json:"copy,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ids            []string          `protobuf:"bytes,5,rep,name=ids" json:"ids,omitempty"`
	Networkinherit bool              `protobuf:"varint,6,opt,name=networkinherit" json:"networkinherit,omitempty"`
}

func (m *ReplaceOptions) Reset()                    { *m = ReplaceOptions{} }
func (m *ReplaceOptions) String() string            { return proto.CompactTextString(m) }
func (*ReplaceOptions) ProtoMessage()               {}
func (*ReplaceOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *ReplaceOptions) GetDeployOpt() *DeployOptions {
	if m != nil {
		return m.DeployOpt
	}
	return nil
}

func (m *ReplaceOptions) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ReplaceOptions) GetFilterLabels() map[string]string {
	if m != nil {
		return m.FilterLabels
	}
	return nil
}

func (m *ReplaceOptions) GetCopy() map[string]string {
	if m != nil {
		return m.Copy
	}
	return nil
}

func (m *ReplaceOptions) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ReplaceOptions) GetNetworkinherit() bool {
	if m != nil {
		return m.Networkinherit
	}
	return false
}

type CacheImageOptions struct {
	Podname  string   `protobuf:"bytes,1,opt,name=podname" json:"podname,omitempty"`
	Nodename string   `protobuf:"bytes,2,opt,name=nodename" json:"nodename,omitempty"`
	Images   []string `protobuf:"bytes,3,rep,name=images" json:"images,omitempty"`
	Step     int32    `protobuf:"varint,4,opt,name=step" json:"step,omitempty"`
}

func (m *CacheImageOptions) Reset()                    { *m = CacheImageOptions{} }
func (m *CacheImageOptions) String() string            { return proto.CompactTextString(m) }
func (*CacheImageOptions) ProtoMessage()               {}
func (*CacheImageOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *CacheImageOptions) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *CacheImageOptions) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *CacheImageOptions) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *CacheImageOptions) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

type RemoveImageOptions struct {
	Podname  string   `protobuf:"bytes,1,opt,name=podname" json:"podname,omitempty"`
	Nodename string   `protobuf:"bytes,2,opt,name=nodename" json:"nodename,omitempty"`
	Images   []string `protobuf:"bytes,3,rep,name=images" json:"images,omitempty"`
	Step     int32    `protobuf:"varint,4,opt,name=step" json:"step,omitempty"`
	Prune    bool     `protobuf:"varint,5,opt,name=prune" json:"prune,omitempty"`
}

func (m *RemoveImageOptions) Reset()                    { *m = RemoveImageOptions{} }
func (m *RemoveImageOptions) String() string            { return proto.CompactTextString(m) }
func (*RemoveImageOptions) ProtoMessage()               {}
func (*RemoveImageOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *RemoveImageOptions) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *RemoveImageOptions) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *RemoveImageOptions) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *RemoveImageOptions) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *RemoveImageOptions) GetPrune() bool {
	if m != nil {
		return m.Prune
	}
	return false
}

type CopyPaths struct {
	Paths []string `protobuf:"bytes,1,rep,name=paths" json:"paths,omitempty"`
}

func (m *CopyPaths) Reset()                    { *m = CopyPaths{} }
func (m *CopyPaths) String() string            { return proto.CompactTextString(m) }
func (*CopyPaths) ProtoMessage()               {}
func (*CopyPaths) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *CopyPaths) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

type CopyOptions struct {
	Targets map[string]*CopyPaths `protobuf:"bytes,1,rep,name=targets" json:"targets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CopyOptions) Reset()                    { *m = CopyOptions{} }
func (m *CopyOptions) String() string            { return proto.CompactTextString(m) }
func (*CopyOptions) ProtoMessage()               {}
func (*CopyOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *CopyOptions) GetTargets() map[string]*CopyPaths {
	if m != nil {
		return m.Targets
	}
	return nil
}

type ErrorDetail struct {
	Code    int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ErrorDetail) Reset()                    { *m = ErrorDetail{} }
func (m *ErrorDetail) String() string            { return proto.CompactTextString(m) }
func (*ErrorDetail) ProtoMessage()               {}
func (*ErrorDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *ErrorDetail) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ErrorDetail) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type BuildImageMessage struct {
	Id          string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status      string       `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Progress    string       `protobuf:"bytes,3,opt,name=progress" json:"progress,omitempty"`
	Error       string       `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	Stream      string       `protobuf:"bytes,5,opt,name=stream" json:"stream,omitempty"`
	ErrorDetail *ErrorDetail `protobuf:"bytes,6,opt,name=error_detail,json=errorDetail" json:"error_detail,omitempty"`
}

func (m *BuildImageMessage) Reset()                    { *m = BuildImageMessage{} }
func (m *BuildImageMessage) String() string            { return proto.CompactTextString(m) }
func (*BuildImageMessage) ProtoMessage()               {}
func (*BuildImageMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *BuildImageMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BuildImageMessage) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *BuildImageMessage) GetProgress() string {
	if m != nil {
		return m.Progress
	}
	return ""
}

func (m *BuildImageMessage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *BuildImageMessage) GetStream() string {
	if m != nil {
		return m.Stream
	}
	return ""
}

func (m *BuildImageMessage) GetErrorDetail() *ErrorDetail {
	if m != nil {
		return m.ErrorDetail
	}
	return nil
}

type CreateContainerMessage struct {
	Podname  string            `protobuf:"bytes,1,opt,name=podname" json:"podname,omitempty"`
	Nodename string            `protobuf:"bytes,2,opt,name=nodename" json:"nodename,omitempty"`
	Id       string            `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Name     string            `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Error    string            `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
	Success  bool              `protobuf:"varint,6,opt,name=success" json:"success,omitempty"`
	Cpu      map[string]int32  `protobuf:"bytes,7,rep,name=cpu" json:"cpu,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Quota    float64           `protobuf:"fixed64,8,opt,name=quota" json:"quota,omitempty"`
	Memory   int64             `protobuf:"varint,9,opt,name=memory" json:"memory,omitempty"`
	Publish  map[string]string `protobuf:"bytes,10,rep,name=publish" json:"publish,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Hook     []byte            `protobuf:"bytes,11,opt,name=hook,proto3" json:"hook,omitempty"`
}

func (m *CreateContainerMessage) Reset()                    { *m = CreateContainerMessage{} }
func (m *CreateContainerMessage) String() string            { return proto.CompactTextString(m) }
func (*CreateContainerMessage) ProtoMessage()               {}
func (*CreateContainerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *CreateContainerMessage) GetPodname() string {
	if m != nil {
		return m.Podname
	}
	return ""
}

func (m *CreateContainerMessage) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *CreateContainerMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateContainerMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateContainerMessage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *CreateContainerMessage) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CreateContainerMessage) GetCpu() map[string]int32 {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *CreateContainerMessage) GetQuota() float64 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *CreateContainerMessage) GetMemory() int64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *CreateContainerMessage) GetPublish() map[string]string {
	if m != nil {
		return m.Publish
	}
	return nil
}

func (m *CreateContainerMessage) GetHook() []byte {
	if m != nil {
		return m.Hook
	}
	return nil
}

type ReplaceContainerMessage struct {
	Create *CreateContainerMessage `protobuf:"bytes,1,opt,name=create" json:"create,omitempty"`
	Remove *RemoveContainerMessage `protobuf:"bytes,2,opt,name=remove" json:"remove,omitempty"`
	Error  string                  `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *ReplaceContainerMessage) Reset()                    { *m = ReplaceContainerMessage{} }
func (m *ReplaceContainerMessage) String() string            { return proto.CompactTextString(m) }
func (*ReplaceContainerMessage) ProtoMessage()               {}
func (*ReplaceContainerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *ReplaceContainerMessage) GetCreate() *CreateContainerMessage {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *ReplaceContainerMessage) GetRemove() *RemoveContainerMessage {
	if m != nil {
		return m.Remove
	}
	return nil
}

func (m *ReplaceContainerMessage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type RunAndWaitMessage struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	Data        []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RunAndWaitMessage) Reset()                    { *m = RunAndWaitMessage{} }
func (m *RunAndWaitMessage) String() string            { return proto.CompactTextString(m) }
func (*RunAndWaitMessage) ProtoMessage()               {}
func (*RunAndWaitMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *RunAndWaitMessage) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *RunAndWaitMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CacheImageMessage struct {
	Image    string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	Success  bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Nodename string `protobuf:"bytes,3,opt,name=nodename" json:"nodename,omitempty"`
	Message  string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (m *CacheImageMessage) Reset()                    { *m = CacheImageMessage{} }
func (m *CacheImageMessage) String() string            { return proto.CompactTextString(m) }
func (*CacheImageMessage) ProtoMessage()               {}
func (*CacheImageMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *CacheImageMessage) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *CacheImageMessage) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CacheImageMessage) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

func (m *CacheImageMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RemoveImageMessage struct {
	Image    string   `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	Success  bool     `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Messages []string `protobuf:"bytes,3,rep,name=messages" json:"messages,omitempty"`
}

func (m *RemoveImageMessage) Reset()                    { *m = RemoveImageMessage{} }
func (m *RemoveImageMessage) String() string            { return proto.CompactTextString(m) }
func (*RemoveImageMessage) ProtoMessage()               {}
func (*RemoveImageMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *RemoveImageMessage) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *RemoveImageMessage) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RemoveImageMessage) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

type RemoveContainerMessage struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Hook    string `protobuf:"bytes,3,opt,name=hook" json:"hook,omitempty"`
}

func (m *RemoveContainerMessage) Reset()                    { *m = RemoveContainerMessage{} }
func (m *RemoveContainerMessage) String() string            { return proto.CompactTextString(m) }
func (*RemoveContainerMessage) ProtoMessage()               {}
func (*RemoveContainerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *RemoveContainerMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RemoveContainerMessage) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RemoveContainerMessage) GetHook() string {
	if m != nil {
		return m.Hook
	}
	return ""
}

type ReallocResourceMessage struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *ReallocResourceMessage) Reset()                    { *m = ReallocResourceMessage{} }
func (m *ReallocResourceMessage) String() string            { return proto.CompactTextString(m) }
func (*ReallocResourceMessage) ProtoMessage()               {}
func (*ReallocResourceMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *ReallocResourceMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReallocResourceMessage) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type CopyMessage struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Path   string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	Error  string `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
	Data   []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CopyMessage) Reset()                    { *m = CopyMessage{} }
func (m *CopyMessage) String() string            { return proto.CompactTextString(m) }
func (*CopyMessage) ProtoMessage()               {}
func (*CopyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *CopyMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CopyMessage) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CopyMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CopyMessage) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CopyMessage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *CopyMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RunAndWaitOptions struct {
	DeployOptions *DeployOptions `protobuf:"bytes,1,opt,name=DeployOptions" json:"DeployOptions,omitempty"`
	Cmd           []byte         `protobuf:"bytes,2,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
}

func (m *RunAndWaitOptions) Reset()                    { *m = RunAndWaitOptions{} }
func (m *RunAndWaitOptions) String() string            { return proto.CompactTextString(m) }
func (*RunAndWaitOptions) ProtoMessage()               {}
func (*RunAndWaitOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *RunAndWaitOptions) GetDeployOptions() *DeployOptions {
	if m != nil {
		return m.DeployOptions
	}
	return nil
}

func (m *RunAndWaitOptions) GetCmd() []byte {
	if m != nil {
		return m.Cmd
	}
	return nil
}

type ControlContainerOptions struct {
	Ids  []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	Type string   `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *ControlContainerOptions) Reset()                    { *m = ControlContainerOptions{} }
func (m *ControlContainerOptions) String() string            { return proto.CompactTextString(m) }
func (*ControlContainerOptions) ProtoMessage()               {}
func (*ControlContainerOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *ControlContainerOptions) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ControlContainerOptions) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type ControlContainerMessage struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Hook  []byte `protobuf:"bytes,3,opt,name=hook,proto3" json:"hook,omitempty"`
}

func (m *ControlContainerMessage) Reset()                    { *m = ControlContainerMessage{} }
func (m *ControlContainerMessage) String() string            { return proto.CompactTextString(m) }
func (*ControlContainerMessage) ProtoMessage()               {}
func (*ControlContainerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *ControlContainerMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ControlContainerMessage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ControlContainerMessage) GetHook() []byte {
	if m != nil {
		return m.Hook
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*ListContainersOptions)(nil), "pb.ListContainersOptions")
	proto.RegisterType((*DeployStatusOptions)(nil), "pb.DeployStatusOptions")
	proto.RegisterType((*DeployStatusMessage)(nil), "pb.DeployStatusMessage")
	proto.RegisterType((*Pod)(nil), "pb.Pod")
	proto.RegisterType((*Pods)(nil), "pb.Pods")
	proto.RegisterType((*PodResource)(nil), "pb.PodResource")
	proto.RegisterType((*ListNetworkOptions)(nil), "pb.ListNetworkOptions")
	proto.RegisterType((*Network)(nil), "pb.Network")
	proto.RegisterType((*Networks)(nil), "pb.Networks")
	proto.RegisterType((*Node)(nil), "pb.Node")
	proto.RegisterType((*Nodes)(nil), "pb.Nodes")
	proto.RegisterType((*NodeAvailable)(nil), "pb.NodeAvailable")
	proto.RegisterType((*Container)(nil), "pb.Container")
	proto.RegisterType((*ContainerDeployedOptions)(nil), "pb.ContainerDeployedOptions")
	proto.RegisterType((*Containers)(nil), "pb.Containers")
	proto.RegisterType((*ContainerID)(nil), "pb.ContainerID")
	proto.RegisterType((*ContainerIDs)(nil), "pb.ContainerIDs")
	proto.RegisterType((*RemoveContainerOptions)(nil), "pb.RemoveContainerOptions")
	proto.RegisterType((*ReallocOptions)(nil), "pb.ReallocOptions")
	proto.RegisterType((*AddPodOptions)(nil), "pb.AddPodOptions")
	proto.RegisterType((*RemovePodOptions)(nil), "pb.RemovePodOptions")
	proto.RegisterType((*GetPodOptions)(nil), "pb.GetPodOptions")
	proto.RegisterType((*AddNodeOptions)(nil), "pb.AddNodeOptions")
	proto.RegisterType((*RemoveNodeOptions)(nil), "pb.RemoveNodeOptions")
	proto.RegisterType((*GetNodeOptions)(nil), "pb.GetNodeOptions")
	proto.RegisterType((*ListNodesOptions)(nil), "pb.ListNodesOptions")
	proto.RegisterType((*Build)(nil), "pb.Build")
	proto.RegisterType((*Builds)(nil), "pb.Builds")
	proto.RegisterType((*BuildImageOptions)(nil), "pb.BuildImageOptions")
	proto.RegisterType((*HookOptions)(nil), "pb.HookOptions")
	proto.RegisterType((*HealthCheckOptions)(nil), "pb.HealthCheckOptions")
	proto.RegisterType((*LogOptions)(nil), "pb.LogOptions")
	proto.RegisterType((*EntrypointOptions)(nil), "pb.EntrypointOptions")
	proto.RegisterType((*DeployOptions)(nil), "pb.DeployOptions")
	proto.RegisterType((*ReplaceOptions)(nil), "pb.ReplaceOptions")
	proto.RegisterType((*CacheImageOptions)(nil), "pb.CacheImageOptions")
	proto.RegisterType((*RemoveImageOptions)(nil), "pb.RemoveImageOptions")
	proto.RegisterType((*CopyPaths)(nil), "pb.CopyPaths")
	proto.RegisterType((*CopyOptions)(nil), "pb.CopyOptions")
	proto.RegisterType((*ErrorDetail)(nil), "pb.ErrorDetail")
	proto.RegisterType((*BuildImageMessage)(nil), "pb.BuildImageMessage")
	proto.RegisterType((*CreateContainerMessage)(nil), "pb.CreateContainerMessage")
	proto.RegisterType((*ReplaceContainerMessage)(nil), "pb.ReplaceContainerMessage")
	proto.RegisterType((*RunAndWaitMessage)(nil), "pb.RunAndWaitMessage")
	proto.RegisterType((*CacheImageMessage)(nil), "pb.CacheImageMessage")
	proto.RegisterType((*RemoveImageMessage)(nil), "pb.RemoveImageMessage")
	proto.RegisterType((*RemoveContainerMessage)(nil), "pb.RemoveContainerMessage")
	proto.RegisterType((*ReallocResourceMessage)(nil), "pb.ReallocResourceMessage")
	proto.RegisterType((*CopyMessage)(nil), "pb.CopyMessage")
	proto.RegisterType((*RunAndWaitOptions)(nil), "pb.RunAndWaitOptions")
	proto.RegisterType((*ControlContainerOptions)(nil), "pb.ControlContainerOptions")
	proto.RegisterType((*ControlContainerMessage)(nil), "pb.ControlContainerMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CoreRPC service

type CoreRPCClient interface {
	ListPods(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pods, error)
	AddPod(ctx context.Context, in *AddPodOptions, opts ...grpc.CallOption) (*Pod, error)
	RemovePod(ctx context.Context, in *RemovePodOptions, opts ...grpc.CallOption) (*Empty, error)
	GetPod(ctx context.Context, in *GetPodOptions, opts ...grpc.CallOption) (*Pod, error)
	GetPodResource(ctx context.Context, in *GetPodOptions, opts ...grpc.CallOption) (*PodResource, error)
	AddNode(ctx context.Context, in *AddNodeOptions, opts ...grpc.CallOption) (*Node, error)
	RemoveNode(ctx context.Context, in *RemoveNodeOptions, opts ...grpc.CallOption) (*Pod, error)
	SetNodeAvailable(ctx context.Context, in *NodeAvailable, opts ...grpc.CallOption) (*Node, error)
	GetNode(ctx context.Context, in *GetNodeOptions, opts ...grpc.CallOption) (*Node, error)
	GetContainer(ctx context.Context, in *ContainerID, opts ...grpc.CallOption) (*Container, error)
	GetContainers(ctx context.Context, in *ContainerIDs, opts ...grpc.CallOption) (*Containers, error)
	GetNodeByName(ctx context.Context, in *GetNodeOptions, opts ...grpc.CallOption) (*Node, error)
	ListPodNodes(ctx context.Context, in *ListNodesOptions, opts ...grpc.CallOption) (*Nodes, error)
	ListNetworks(ctx context.Context, in *ListNetworkOptions, opts ...grpc.CallOption) (*Networks, error)
	ListContainers(ctx context.Context, in *ListContainersOptions, opts ...grpc.CallOption) (*Containers, error)
	ListNodeContainers(ctx context.Context, in *GetNodeOptions, opts ...grpc.CallOption) (*Containers, error)
	ContainerDeployed(ctx context.Context, in *ContainerDeployedOptions, opts ...grpc.CallOption) (*Empty, error)
	Copy(ctx context.Context, in *CopyOptions, opts ...grpc.CallOption) (CoreRPC_CopyClient, error)
	BuildImage(ctx context.Context, in *BuildImageOptions, opts ...grpc.CallOption) (CoreRPC_BuildImageClient, error)
	CacheImage(ctx context.Context, in *CacheImageOptions, opts ...grpc.CallOption) (CoreRPC_CacheImageClient, error)
	RemoveImage(ctx context.Context, in *RemoveImageOptions, opts ...grpc.CallOption) (CoreRPC_RemoveImageClient, error)
	DeployStatus(ctx context.Context, in *DeployStatusOptions, opts ...grpc.CallOption) (CoreRPC_DeployStatusClient, error)
	RunAndWait(ctx context.Context, opts ...grpc.CallOption) (CoreRPC_RunAndWaitClient, error)
	CreateContainer(ctx context.Context, in *DeployOptions, opts ...grpc.CallOption) (CoreRPC_CreateContainerClient, error)
	ReplaceContainer(ctx context.Context, in *ReplaceOptions, opts ...grpc.CallOption) (CoreRPC_ReplaceContainerClient, error)
	RemoveContainer(ctx context.Context, in *RemoveContainerOptions, opts ...grpc.CallOption) (CoreRPC_RemoveContainerClient, error)
	ControlContainer(ctx context.Context, in *ControlContainerOptions, opts ...grpc.CallOption) (CoreRPC_ControlContainerClient, error)
	ReallocResource(ctx context.Context, in *ReallocOptions, opts ...grpc.CallOption) (CoreRPC_ReallocResourceClient, error)
}

type coreRPCClient struct {
	cc *grpc.ClientConn
}

func NewCoreRPCClient(cc *grpc.ClientConn) CoreRPCClient {
	return &coreRPCClient{cc}
}

func (c *coreRPCClient) ListPods(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pods, error) {
	out := new(Pods)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/ListPods", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) AddPod(ctx context.Context, in *AddPodOptions, opts ...grpc.CallOption) (*Pod, error) {
	out := new(Pod)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/AddPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) RemovePod(ctx context.Context, in *RemovePodOptions, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/RemovePod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) GetPod(ctx context.Context, in *GetPodOptions, opts ...grpc.CallOption) (*Pod, error) {
	out := new(Pod)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/GetPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) GetPodResource(ctx context.Context, in *GetPodOptions, opts ...grpc.CallOption) (*PodResource, error) {
	out := new(PodResource)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/GetPodResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) AddNode(ctx context.Context, in *AddNodeOptions, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/AddNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) RemoveNode(ctx context.Context, in *RemoveNodeOptions, opts ...grpc.CallOption) (*Pod, error) {
	out := new(Pod)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/RemoveNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) SetNodeAvailable(ctx context.Context, in *NodeAvailable, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/SetNodeAvailable", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) GetNode(ctx context.Context, in *GetNodeOptions, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/GetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) GetContainer(ctx context.Context, in *ContainerID, opts ...grpc.CallOption) (*Container, error) {
	out := new(Container)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/GetContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) GetContainers(ctx context.Context, in *ContainerIDs, opts ...grpc.CallOption) (*Containers, error) {
	out := new(Containers)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/GetContainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) GetNodeByName(ctx context.Context, in *GetNodeOptions, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/GetNodeByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) ListPodNodes(ctx context.Context, in *ListNodesOptions, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/ListPodNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) ListNetworks(ctx context.Context, in *ListNetworkOptions, opts ...grpc.CallOption) (*Networks, error) {
	out := new(Networks)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/ListNetworks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) ListContainers(ctx context.Context, in *ListContainersOptions, opts ...grpc.CallOption) (*Containers, error) {
	out := new(Containers)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/ListContainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) ListNodeContainers(ctx context.Context, in *GetNodeOptions, opts ...grpc.CallOption) (*Containers, error) {
	out := new(Containers)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/ListNodeContainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) ContainerDeployed(ctx context.Context, in *ContainerDeployedOptions, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/ContainerDeployed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) Copy(ctx context.Context, in *CopyOptions, opts ...grpc.CallOption) (CoreRPC_CopyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[0], c.cc, "/pb.CoreRPC/Copy", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCCopyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_CopyClient interface {
	Recv() (*CopyMessage, error)
	grpc.ClientStream
}

type coreRPCCopyClient struct {
	grpc.ClientStream
}

func (x *coreRPCCopyClient) Recv() (*CopyMessage, error) {
	m := new(CopyMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) BuildImage(ctx context.Context, in *BuildImageOptions, opts ...grpc.CallOption) (CoreRPC_BuildImageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[1], c.cc, "/pb.CoreRPC/BuildImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCBuildImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_BuildImageClient interface {
	Recv() (*BuildImageMessage, error)
	grpc.ClientStream
}

type coreRPCBuildImageClient struct {
	grpc.ClientStream
}

func (x *coreRPCBuildImageClient) Recv() (*BuildImageMessage, error) {
	m := new(BuildImageMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) CacheImage(ctx context.Context, in *CacheImageOptions, opts ...grpc.CallOption) (CoreRPC_CacheImageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[2], c.cc, "/pb.CoreRPC/CacheImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCCacheImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_CacheImageClient interface {
	Recv() (*CacheImageMessage, error)
	grpc.ClientStream
}

type coreRPCCacheImageClient struct {
	grpc.ClientStream
}

func (x *coreRPCCacheImageClient) Recv() (*CacheImageMessage, error) {
	m := new(CacheImageMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) RemoveImage(ctx context.Context, in *RemoveImageOptions, opts ...grpc.CallOption) (CoreRPC_RemoveImageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[3], c.cc, "/pb.CoreRPC/RemoveImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCRemoveImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_RemoveImageClient interface {
	Recv() (*RemoveImageMessage, error)
	grpc.ClientStream
}

type coreRPCRemoveImageClient struct {
	grpc.ClientStream
}

func (x *coreRPCRemoveImageClient) Recv() (*RemoveImageMessage, error) {
	m := new(RemoveImageMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) DeployStatus(ctx context.Context, in *DeployStatusOptions, opts ...grpc.CallOption) (CoreRPC_DeployStatusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[4], c.cc, "/pb.CoreRPC/DeployStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCDeployStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_DeployStatusClient interface {
	Recv() (*DeployStatusMessage, error)
	grpc.ClientStream
}

type coreRPCDeployStatusClient struct {
	grpc.ClientStream
}

func (x *coreRPCDeployStatusClient) Recv() (*DeployStatusMessage, error) {
	m := new(DeployStatusMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) RunAndWait(ctx context.Context, opts ...grpc.CallOption) (CoreRPC_RunAndWaitClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[5], c.cc, "/pb.CoreRPC/RunAndWait", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCRunAndWaitClient{stream}
	return x, nil
}

type CoreRPC_RunAndWaitClient interface {
	Send(*RunAndWaitOptions) error
	Recv() (*RunAndWaitMessage, error)
	grpc.ClientStream
}

type coreRPCRunAndWaitClient struct {
	grpc.ClientStream
}

func (x *coreRPCRunAndWaitClient) Send(m *RunAndWaitOptions) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coreRPCRunAndWaitClient) Recv() (*RunAndWaitMessage, error) {
	m := new(RunAndWaitMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) CreateContainer(ctx context.Context, in *DeployOptions, opts ...grpc.CallOption) (CoreRPC_CreateContainerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[6], c.cc, "/pb.CoreRPC/CreateContainer", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCCreateContainerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_CreateContainerClient interface {
	Recv() (*CreateContainerMessage, error)
	grpc.ClientStream
}

type coreRPCCreateContainerClient struct {
	grpc.ClientStream
}

func (x *coreRPCCreateContainerClient) Recv() (*CreateContainerMessage, error) {
	m := new(CreateContainerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) ReplaceContainer(ctx context.Context, in *ReplaceOptions, opts ...grpc.CallOption) (CoreRPC_ReplaceContainerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[7], c.cc, "/pb.CoreRPC/ReplaceContainer", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCReplaceContainerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_ReplaceContainerClient interface {
	Recv() (*ReplaceContainerMessage, error)
	grpc.ClientStream
}

type coreRPCReplaceContainerClient struct {
	grpc.ClientStream
}

func (x *coreRPCReplaceContainerClient) Recv() (*ReplaceContainerMessage, error) {
	m := new(ReplaceContainerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) RemoveContainer(ctx context.Context, in *RemoveContainerOptions, opts ...grpc.CallOption) (CoreRPC_RemoveContainerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[8], c.cc, "/pb.CoreRPC/RemoveContainer", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCRemoveContainerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_RemoveContainerClient interface {
	Recv() (*RemoveContainerMessage, error)
	grpc.ClientStream
}

type coreRPCRemoveContainerClient struct {
	grpc.ClientStream
}

func (x *coreRPCRemoveContainerClient) Recv() (*RemoveContainerMessage, error) {
	m := new(RemoveContainerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) ControlContainer(ctx context.Context, in *ControlContainerOptions, opts ...grpc.CallOption) (CoreRPC_ControlContainerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[9], c.cc, "/pb.CoreRPC/ControlContainer", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCControlContainerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_ControlContainerClient interface {
	Recv() (*ControlContainerMessage, error)
	grpc.ClientStream
}

type coreRPCControlContainerClient struct {
	grpc.ClientStream
}

func (x *coreRPCControlContainerClient) Recv() (*ControlContainerMessage, error) {
	m := new(ControlContainerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) ReallocResource(ctx context.Context, in *ReallocOptions, opts ...grpc.CallOption) (CoreRPC_ReallocResourceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[10], c.cc, "/pb.CoreRPC/ReallocResource", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCReallocResourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_ReallocResourceClient interface {
	Recv() (*ReallocResourceMessage, error)
	grpc.ClientStream
}

type coreRPCReallocResourceClient struct {
	grpc.ClientStream
}

func (x *coreRPCReallocResourceClient) Recv() (*ReallocResourceMessage, error) {
	m := new(ReallocResourceMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CoreRPC service

type CoreRPCServer interface {
	ListPods(context.Context, *Empty) (*Pods, error)
	AddPod(context.Context, *AddPodOptions) (*Pod, error)
	RemovePod(context.Context, *RemovePodOptions) (*Empty, error)
	GetPod(context.Context, *GetPodOptions) (*Pod, error)
	GetPodResource(context.Context, *GetPodOptions) (*PodResource, error)
	AddNode(context.Context, *AddNodeOptions) (*Node, error)
	RemoveNode(context.Context, *RemoveNodeOptions) (*Pod, error)
	SetNodeAvailable(context.Context, *NodeAvailable) (*Node, error)
	GetNode(context.Context, *GetNodeOptions) (*Node, error)
	GetContainer(context.Context, *ContainerID) (*Container, error)
	GetContainers(context.Context, *ContainerIDs) (*Containers, error)
	GetNodeByName(context.Context, *GetNodeOptions) (*Node, error)
	ListPodNodes(context.Context, *ListNodesOptions) (*Nodes, error)
	ListNetworks(context.Context, *ListNetworkOptions) (*Networks, error)
	ListContainers(context.Context, *ListContainersOptions) (*Containers, error)
	ListNodeContainers(context.Context, *GetNodeOptions) (*Containers, error)
	ContainerDeployed(context.Context, *ContainerDeployedOptions) (*Empty, error)
	Copy(*CopyOptions, CoreRPC_CopyServer) error
	BuildImage(*BuildImageOptions, CoreRPC_BuildImageServer) error
	CacheImage(*CacheImageOptions, CoreRPC_CacheImageServer) error
	RemoveImage(*RemoveImageOptions, CoreRPC_RemoveImageServer) error
	DeployStatus(*DeployStatusOptions, CoreRPC_DeployStatusServer) error
	RunAndWait(CoreRPC_RunAndWaitServer) error
	CreateContainer(*DeployOptions, CoreRPC_CreateContainerServer) error
	ReplaceContainer(*ReplaceOptions, CoreRPC_ReplaceContainerServer) error
	RemoveContainer(*RemoveContainerOptions, CoreRPC_RemoveContainerServer) error
	ControlContainer(*ControlContainerOptions, CoreRPC_ControlContainerServer) error
	ReallocResource(*ReallocOptions, CoreRPC_ReallocResourceServer) error
}

func RegisterCoreRPCServer(s *grpc.Server, srv CoreRPCServer) {
	s.RegisterService(&_CoreRPC_serviceDesc, srv)
}

func _CoreRPC_ListPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).ListPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/ListPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).ListPods(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_AddPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPodOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).AddPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/AddPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).AddPod(ctx, req.(*AddPodOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_RemovePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePodOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).RemovePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/RemovePod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).RemovePod(ctx, req.(*RemovePodOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_GetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).GetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/GetPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).GetPod(ctx, req.(*GetPodOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_GetPodResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).GetPodResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/GetPodResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).GetPodResource(ctx, req.(*GetPodOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodeOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).AddNode(ctx, req.(*AddNodeOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNodeOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).RemoveNode(ctx, req.(*RemoveNodeOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_SetNodeAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeAvailable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).SetNodeAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/SetNodeAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).SetNodeAvailable(ctx, req.(*NodeAvailable))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).GetNode(ctx, req.(*GetNodeOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_GetContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).GetContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/GetContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).GetContainer(ctx, req.(*ContainerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_GetContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).GetContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/GetContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).GetContainers(ctx, req.(*ContainerIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_GetNodeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).GetNodeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/GetNodeByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).GetNodeByName(ctx, req.(*GetNodeOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_ListPodNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).ListPodNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/ListPodNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).ListPodNodes(ctx, req.(*ListNodesOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).ListNetworks(ctx, req.(*ListNetworkOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_ListContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainersOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).ListContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/ListContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).ListContainers(ctx, req.(*ListContainersOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_ListNodeContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).ListNodeContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/ListNodeContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).ListNodeContainers(ctx, req.(*GetNodeOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_ContainerDeployed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerDeployedOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).ContainerDeployed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/ContainerDeployed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).ContainerDeployed(ctx, req.(*ContainerDeployedOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_Copy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CopyOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).Copy(m, &coreRPCCopyServer{stream})
}

type CoreRPC_CopyServer interface {
	Send(*CopyMessage) error
	grpc.ServerStream
}

type coreRPCCopyServer struct {
	grpc.ServerStream
}

func (x *coreRPCCopyServer) Send(m *CopyMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_BuildImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildImageOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).BuildImage(m, &coreRPCBuildImageServer{stream})
}

type CoreRPC_BuildImageServer interface {
	Send(*BuildImageMessage) error
	grpc.ServerStream
}

type coreRPCBuildImageServer struct {
	grpc.ServerStream
}

func (x *coreRPCBuildImageServer) Send(m *BuildImageMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_CacheImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CacheImageOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).CacheImage(m, &coreRPCCacheImageServer{stream})
}

type CoreRPC_CacheImageServer interface {
	Send(*CacheImageMessage) error
	grpc.ServerStream
}

type coreRPCCacheImageServer struct {
	grpc.ServerStream
}

func (x *coreRPCCacheImageServer) Send(m *CacheImageMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_RemoveImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RemoveImageOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).RemoveImage(m, &coreRPCRemoveImageServer{stream})
}

type CoreRPC_RemoveImageServer interface {
	Send(*RemoveImageMessage) error
	grpc.ServerStream
}

type coreRPCRemoveImageServer struct {
	grpc.ServerStream
}

func (x *coreRPCRemoveImageServer) Send(m *RemoveImageMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_DeployStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployStatusOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).DeployStatus(m, &coreRPCDeployStatusServer{stream})
}

type CoreRPC_DeployStatusServer interface {
	Send(*DeployStatusMessage) error
	grpc.ServerStream
}

type coreRPCDeployStatusServer struct {
	grpc.ServerStream
}

func (x *coreRPCDeployStatusServer) Send(m *DeployStatusMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_RunAndWait_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoreRPCServer).RunAndWait(&coreRPCRunAndWaitServer{stream})
}

type CoreRPC_RunAndWaitServer interface {
	Send(*RunAndWaitMessage) error
	Recv() (*RunAndWaitOptions, error)
	grpc.ServerStream
}

type coreRPCRunAndWaitServer struct {
	grpc.ServerStream
}

func (x *coreRPCRunAndWaitServer) Send(m *RunAndWaitMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coreRPCRunAndWaitServer) Recv() (*RunAndWaitOptions, error) {
	m := new(RunAndWaitOptions)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CoreRPC_CreateContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).CreateContainer(m, &coreRPCCreateContainerServer{stream})
}

type CoreRPC_CreateContainerServer interface {
	Send(*CreateContainerMessage) error
	grpc.ServerStream
}

type coreRPCCreateContainerServer struct {
	grpc.ServerStream
}

func (x *coreRPCCreateContainerServer) Send(m *CreateContainerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_ReplaceContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplaceOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).ReplaceContainer(m, &coreRPCReplaceContainerServer{stream})
}

type CoreRPC_ReplaceContainerServer interface {
	Send(*ReplaceContainerMessage) error
	grpc.ServerStream
}

type coreRPCReplaceContainerServer struct {
	grpc.ServerStream
}

func (x *coreRPCReplaceContainerServer) Send(m *ReplaceContainerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_RemoveContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RemoveContainerOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).RemoveContainer(m, &coreRPCRemoveContainerServer{stream})
}

type CoreRPC_RemoveContainerServer interface {
	Send(*RemoveContainerMessage) error
	grpc.ServerStream
}

type coreRPCRemoveContainerServer struct {
	grpc.ServerStream
}

func (x *coreRPCRemoveContainerServer) Send(m *RemoveContainerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_ControlContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ControlContainerOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).ControlContainer(m, &coreRPCControlContainerServer{stream})
}

type CoreRPC_ControlContainerServer interface {
	Send(*ControlContainerMessage) error
	grpc.ServerStream
}

type coreRPCControlContainerServer struct {
	grpc.ServerStream
}

func (x *coreRPCControlContainerServer) Send(m *ControlContainerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_ReallocResource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReallocOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).ReallocResource(m, &coreRPCReallocResourceServer{stream})
}

type CoreRPC_ReallocResourceServer interface {
	Send(*ReallocResourceMessage) error
	grpc.ServerStream
}

type coreRPCReallocResourceServer struct {
	grpc.ServerStream
}

func (x *coreRPCReallocResourceServer) Send(m *ReallocResourceMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _CoreRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CoreRPC",
	HandlerType: (*CoreRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPods",
			Handler:    _CoreRPC_ListPods_Handler,
		},
		{
			MethodName: "AddPod",
			Handler:    _CoreRPC_AddPod_Handler,
		},
		{
			MethodName: "RemovePod",
			Handler:    _CoreRPC_RemovePod_Handler,
		},
		{
			MethodName: "GetPod",
			Handler:    _CoreRPC_GetPod_Handler,
		},
		{
			MethodName: "GetPodResource",
			Handler:    _CoreRPC_GetPodResource_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _CoreRPC_AddNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _CoreRPC_RemoveNode_Handler,
		},
		{
			MethodName: "SetNodeAvailable",
			Handler:    _CoreRPC_SetNodeAvailable_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _CoreRPC_GetNode_Handler,
		},
		{
			MethodName: "GetContainer",
			Handler:    _CoreRPC_GetContainer_Handler,
		},
		{
			MethodName: "GetContainers",
			Handler:    _CoreRPC_GetContainers_Handler,
		},
		{
			MethodName: "GetNodeByName",
			Handler:    _CoreRPC_GetNodeByName_Handler,
		},
		{
			MethodName: "ListPodNodes",
			Handler:    _CoreRPC_ListPodNodes_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _CoreRPC_ListNetworks_Handler,
		},
		{
			MethodName: "ListContainers",
			Handler:    _CoreRPC_ListContainers_Handler,
		},
		{
			MethodName: "ListNodeContainers",
			Handler:    _CoreRPC_ListNodeContainers_Handler,
		},
		{
			MethodName: "ContainerDeployed",
			Handler:    _CoreRPC_ContainerDeployed_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Copy",
			Handler:       _CoreRPC_Copy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuildImage",
			Handler:       _CoreRPC_BuildImage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CacheImage",
			Handler:       _CoreRPC_CacheImage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RemoveImage",
			Handler:       _CoreRPC_RemoveImage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeployStatus",
			Handler:       _CoreRPC_DeployStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RunAndWait",
			Handler:       _CoreRPC_RunAndWait_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CreateContainer",
			Handler:       _CoreRPC_CreateContainer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReplaceContainer",
			Handler:       _CoreRPC_ReplaceContainer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RemoveContainer",
			Handler:       _CoreRPC_RemoveContainer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ControlContainer",
			Handler:       _CoreRPC_ControlContainer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReallocResource",
			Handler:       _CoreRPC_ReallocResource_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "core.proto",
}

func init() { proto.RegisterFile("core.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x3a, 0xcb, 0x76, 0xdc, 0xc6,
	0xb1, 0x9a, 0x17, 0x67, 0xa6, 0x66, 0x48, 0x91, 0x6d, 0x8a, 0x82, 0x46, 0xb2, 0x1e, 0xe0, 0xb5,
	0x25, 0xfb, 0xd8, 0xb4, 0x2c, 0x5d, 0x4b, 0xbe, 0x96, 0x5f, 0x34, 0x29, 0xcb, 0xbc, 0x47, 0xf2,
	0xe5, 0x05, 0xf3, 0xd8, 0x85, 0x01, 0x81, 0x9e, 0x21, 0x8e, 0x66, 0x06, 0x08, 0xd0, 0xc3, 0x84,
	0x5f, 0x90, 0x2c, 0x72, 0x4e, 0xb2, 0x48, 0xe2, 0x65, 0x96, 0x59, 0x64, 0x91, 0x75, 0x7e, 0x20,
	0x1b, 0x9f, 0x6c, 0xf2, 0x13, 0xf9, 0x8d, 0x9c, 0xaa, 0x7e, 0xa0, 0x81, 0x01, 0x29, 0x8f, 0x1c,
	0x3b, 0x2b, 0x74, 0x55, 0x57, 0x75, 0x57, 0x77, 0x55, 0x57, 0x55, 0x57, 0x03, 0x20, 0x88, 0x53,
	0xbe, 0x95, 0xa4, 0xb1, 0x88, 0x59, 0x3d, 0x39, 0x72, 0xdb, 0xd0, 0x7a, 0x3c, 0x49, 0xc4, 0xa9,
	0xfb, 0xcf, 0x1a, 0x5c, 0x7a, 0x1a, 0x65, 0x62, 0x27, 0x9e, 0x0a, 0x3f, 0x9a, 0xf2, 0x34, 0xfb,
	0xbf, 0x44, 0x44, 0xf1, 0x34, 0x63, 0x0e, 0xb4, 0xfd, 0x24, 0x99, 0xfa, 0x13, 0xee, 0xd4, 0x6e,
	0xd6, 0xee, 0x74, 0x3d, 0x0d, 0xb2, 0xeb, 0x00, 0x7c, 0x2a, 0xd2, 0xd3, 0x24, 0x8e, 0xa6, 0xc2,
	0xa9, 0x53, 0xa7, 0x85, 0x61, 0x03, 0xe8, 0x4c, 0xe3, 0x90, 0x13, 0x6b, 0x83, 0x7a, 0x0d, 0xcc,
	0x3e, 0x82, 0xa5, 0xb1, 0x7f, 0xc4, 0xc7, 0x99, 0xd3, 0xbc, 0xd9, 0xb8, 0xd3, 0xbb, 0xf7, 0xda,
	0x56, 0x72, 0xb4, 0x55, 0x29, 0xc0, 0xd6, 0x53, 0xa2, 0x7b, 0x8c, 0xe3, 0x7a, 0x8a, 0x69, 0xf0,
	0x3f, 0xd0, 0xb3, 0xd0, 0x6c, 0x15, 0x1a, 0xcf, 0xf9, 0xa9, 0x92, 0x0f, 0x9b, 0x6c, 0x1d, 0x5a,
	0x27, 0xfe, 0x78, 0xc6, 0x95, 0x58, 0x12, 0xf8, 0xa0, 0xfe, 0x7e, 0xcd, 0x7d, 0x0e, 0xaf, 0xec,
	0xf2, 0x64, 0x1c, 0x9f, 0x1e, 0x08, 0x5f, 0xcc, 0xbe, 0xdb, 0x65, 0xba, 0x7f, 0xaa, 0x15, 0x67,
	0x7b, 0xc6, 0xb3, 0xcc, 0x1f, 0x71, 0xb6, 0x01, 0x4b, 0x7e, 0x80, 0x13, 0xab, 0xc9, 0x14, 0x64,
	0x4b, 0x51, 0x3f, 0x4f, 0x8a, 0xc6, 0xb9, 0x52, 0x34, 0x4b, 0x9b, 0xbd, 0x02, 0xf5, 0x28, 0x74,
	0x5a, 0x84, 0xad, 0x47, 0x21, 0x63, 0xd0, 0x0c, 0x7d, 0xe1, 0x3b, 0x4b, 0x37, 0x6b, 0x77, 0xfa,
	0x1e, 0xb5, 0xdd, 0x1d, 0x68, 0xec, 0xc7, 0xd4, 0x65, 0xed, 0x01, 0xb5, 0x89, 0x9c, 0x67, 0x81,
	0x92, 0x88, 0xda, 0xb8, 0xbf, 0x43, 0xff, 0x24, 0x4e, 0x95, 0x24, 0x12, 0x70, 0x37, 0xa1, 0xb9,
	0x1f, 0x87, 0x19, 0xbb, 0x0a, 0xcd, 0x24, 0x0e, 0x33, 0xa7, 0x46, 0xba, 0x6d, 0xa3, 0x6e, 0xf7,
	0xe3, 0xd0, 0x23, 0xa4, 0xfb, 0xf7, 0x06, 0xf4, 0x10, 0xe2, 0x59, 0x3c, 0x4b, 0x03, 0x5e, 0x39,
	0xe5, 0x9b, 0xd0, 0x08, 0x92, 0x99, 0x53, 0x27, 0x7e, 0x47, 0xf3, 0x2b, 0x8e, 0xad, 0x9d, 0x64,
	0x26, 0xcd, 0x01, 0x89, 0xd8, 0x7d, 0x58, 0x9a, 0xf0, 0x49, 0x9c, 0x9e, 0x3a, 0x0d, 0x22, 0xbf,
	0x5a, 0x26, 0x7f, 0x46, 0xbd, 0xca, 0x80, 0x24, 0x29, 0x7b, 0x1b, 0x9a, 0x61, 0x34, 0x1c, 0x2a,
	0xeb, 0xbb, 0x52, 0x66, 0xd9, 0x8d, 0x86, 0x43, 0xc9, 0x40, 0x64, 0x38, 0x47, 0xc8, 0x85, 0x1f,
	0x8d, 0x9d, 0x56, 0xf5, 0x1c, 0xbb, 0xd4, 0xab, 0xe6, 0x90, 0xa4, 0x83, 0x07, 0xd0, 0xd1, 0x92,
	0xbe, 0xc8, 0x42, 0x6b, 0x96, 0x85, 0xa2, 0x71, 0x5b, 0x22, 0x2f, 0xc4, 0xfa, 0x10, 0xba, 0x46,
	0xf4, 0x17, 0x31, 0x76, 0x4a, 0x73, 0x5a, 0x4b, 0x58, 0xe8, 0x40, 0x7d, 0x0e, 0x0c, 0x0f, 0xee,
	0x97, 0x5c, 0xfc, 0x3c, 0x4e, 0x9f, 0x5b, 0xe7, 0x29, 0x89, 0x43, 0xfb, 0x3c, 0x29, 0x10, 0x6d,
	0x3f, 0x4c, 0xa3, 0x13, 0x9e, 0xaa, 0xa1, 0x14, 0xe4, 0x3e, 0x84, 0xb6, 0x1a, 0xa3, 0xd2, 0x24,
	0x1c, 0x68, 0x67, 0xb3, 0xa3, 0x29, 0x17, 0x19, 0x99, 0x45, 0xd7, 0xd3, 0xa0, 0x7b, 0x1f, 0x3a,
	0x8a, 0x31, 0x63, 0xb7, 0xa1, 0x33, 0x55, 0x6d, 0x65, 0x7d, 0x3d, 0x54, 0x95, 0xea, 0xf7, 0x4c,
	0xa7, 0xfb, 0xe7, 0x26, 0x34, 0xbf, 0x8c, 0xc3, 0x6a, 0xf3, 0x1b, 0x40, 0x87, 0x4f, 0x43, 0xfb,
	0xc0, 0x1b, 0xd8, 0x5e, 0x58, 0xa3, 0xb8, 0xb0, 0x4d, 0x69, 0xb4, 0xd2, 0xa4, 0xd6, 0x68, 0xda,
	0x38, 0x2c, 0x5b, 0xeb, 0x15, 0xe8, 0x04, 0xc9, 0xec, 0x70, 0x96, 0x71, 0x79, 0x22, 0x6b, 0x5e,
	0x3b, 0x48, 0x66, 0x3f, 0xcc, 0x78, 0x88, 0x1b, 0xa3, 0x0c, 0x19, 0x0f, 0x66, 0xc3, 0xd8, 0xea,
	0x0d, 0xe8, 0xc9, 0x96, 0xe4, 0x6a, 0x53, 0x27, 0x48, 0x14, 0x31, 0x5e, 0x83, 0xae, 0x7f, 0xe2,
	0x47, 0x63, 0xff, 0x68, 0xcc, 0x9d, 0x0e, 0xa9, 0x36, 0x47, 0xb0, 0xb7, 0x8c, 0xab, 0xed, 0x92,
	0x64, 0xeb, 0x46, 0xb2, 0x0a, 0xcf, 0x8a, 0x93, 0x45, 0xd3, 0x48, 0x1c, 0x2a, 0x49, 0x40, 0x4e,
	0x86, 0x28, 0x69, 0x93, 0xec, 0x2e, 0x74, 0x88, 0x00, 0x97, 0xda, 0xa3, 0x01, 0x2f, 0x99, 0x01,
	0xf7, 0xa6, 0x91, 0x30, 0xcb, 0x6d, 0x47, 0x12, 0xc2, 0x1d, 0x8e, 0xa6, 0xc3, 0xd8, 0xe9, 0xcb,
	0x1d, 0xc6, 0xf6, 0x22, 0x67, 0xa3, 0x55, 0xb2, 0xd3, 0x97, 0x74, 0xfc, 0x83, 0x0f, 0xa0, 0x6f,
	0xcb, 0xb7, 0xc8, 0xb4, 0xee, 0x6d, 0x68, 0xe1, 0x02, 0x33, 0x76, 0x1d, 0x5a, 0xe8, 0x56, 0xb5,
	0x71, 0x75, 0xf4, 0xd2, 0x3d, 0x89, 0x76, 0x03, 0x58, 0x46, 0x70, 0xdb, 0xec, 0xbe, 0xed, 0x97,
	0x6b, 0x25, 0xbf, 0x6c, 0x99, 0x52, 0xbd, 0x68, 0x4a, 0x05, 0x8d, 0x36, 0x4a, 0x1a, 0x75, 0xff,
	0xd6, 0x84, 0xae, 0x89, 0x93, 0xca, 0xbb, 0xd7, 0x8c, 0x77, 0x3f, 0x7b, 0xd4, 0xf3, 0x02, 0xb2,
	0x3e, 0x06, 0x4d, 0xeb, 0x18, 0xdc, 0x91, 0x06, 0x2d, 0x5d, 0xde, 0x06, 0x2e, 0xd5, 0xcc, 0x5a,
	0xb2, 0xea, 0x75, 0x68, 0xfd, 0x6c, 0x16, 0xab, 0x90, 0x52, 0xf3, 0x24, 0x60, 0x19, 0x74, 0xbb,
	0x60, 0xd0, 0xd7, 0x01, 0x92, 0x34, 0x3a, 0x89, 0xc6, 0x7c, 0xc4, 0x43, 0x65, 0xb0, 0x16, 0x86,
	0xbd, 0x5b, 0xb2, 0xd8, 0x2b, 0xc5, 0xa9, 0xab, 0xcc, 0xf6, 0xbf, 0xa1, 0x9d, 0xcc, 0x8e, 0xc6,
	0x51, 0x76, 0xec, 0x00, 0xf1, 0x0c, 0x8a, 0x3c, 0xfb, 0xb2, 0x53, 0x59, 0xa6, 0x22, 0x45, 0xb1,
	0xa3, 0x89, 0x3f, 0xe2, 0x4e, 0x4f, 0x1a, 0x0b, 0x01, 0xb8, 0x81, 0xd1, 0x34, 0x4b, 0x78, 0x20,
	0xc8, 0x64, 0xfb, 0x9e, 0x06, 0xf1, 0x70, 0x64, 0x14, 0xc7, 0x0f, 0x29, 0x7e, 0x2e, 0x53, 0x2f,
	0x48, 0xd4, 0xae, 0x2f, 0xfc, 0xff, 0x90, 0x59, 0xdb, 0x8b, 0x5b, 0xc8, 0x75, 0xff, 0xae, 0x06,
	0x8e, 0xd9, 0x23, 0x99, 0xa7, 0xf0, 0x50, 0x7b, 0xf0, 0x0a, 0xbb, 0xfa, 0x0e, 0x72, 0x13, 0x9d,
	0x8b, 0xb4, 0xac, 0x5c, 0xe4, 0x11, 0x40, 0x9e, 0x06, 0xb2, 0xb7, 0x31, 0x6b, 0xd5, 0x90, 0x3a,
	0x77, 0xcb, 0x05, 0xed, 0x7a, 0x16, 0x81, 0xfb, 0x2a, 0xf4, 0x4c, 0xc7, 0xde, 0x6e, 0x79, 0x15,
	0xee, 0x4d, 0xe8, 0x5b, 0xdd, 0x19, 0x6e, 0x57, 0xa4, 0x32, 0x95, 0xae, 0x87, 0x4d, 0xf7, 0x53,
	0xd8, 0xf0, 0xf8, 0x24, 0x3e, 0xe1, 0x86, 0x4e, 0xef, 0xc8, 0x1c, 0x2d, 0xa5, 0x41, 0x71, 0x1a,
	0x98, 0x80, 0x4a, 0x80, 0xfb, 0x39, 0xac, 0x78, 0xdc, 0x1f, 0x8f, 0xe3, 0xe0, 0x6c, 0xce, 0x55,
	0x9d, 0xe1, 0xe0, 0x79, 0xa1, 0x33, 0xb4, 0x0a, 0x8d, 0x09, 0x9f, 0xd0, 0xf6, 0x35, 0x3c, 0x6c,
	0xba, 0xcf, 0x60, 0x79, 0x3b, 0x0c, 0xf7, 0x63, 0xa3, 0x92, 0xaa, 0x58, 0x65, 0x32, 0xb1, 0xba,
	0x95, 0x89, 0x99, 0x9c, 0xad, 0x91, 0xe7, 0x6c, 0xee, 0xeb, 0xb0, 0x2a, 0x17, 0x76, 0xfe, 0x88,
	0xee, 0x26, 0x2c, 0x3f, 0xe1, 0xe2, 0x05, 0x44, 0x5f, 0xd7, 0x61, 0x65, 0x3b, 0x0c, 0xd1, 0xd9,
	0x69, 0xb2, 0xf3, 0x5c, 0xdd, 0xcb, 0x45, 0xd4, 0x15, 0xa8, 0x07, 0xbe, 0x32, 0x99, 0x7a, 0xe0,
	0xa3, 0x20, 0x01, 0x4f, 0x85, 0x4a, 0x65, 0xa9, 0xad, 0xed, 0x7d, 0x29, 0xb7, 0x77, 0xb5, 0xb5,
	0x6d, 0x3a, 0x64, 0xda, 0x3d, 0x65, 0xc7, 0x7e, 0x2a, 0x83, 0x63, 0xcb, 0x93, 0x80, 0xe5, 0x9e,
	0xba, 0x05, 0xf7, 0xf4, 0xc0, 0xb8, 0x1f, 0xe9, 0x4a, 0xae, 0xa3, 0xb1, 0x15, 0xd7, 0xfa, 0xef,
	0xbe, 0x94, 0xec, 0xc1, 0x9a, 0x54, 0xcd, 0x37, 0xdd, 0xcf, 0x33, 0x9d, 0x3c, 0x1a, 0xdf, 0x13,
	0x2e, 0xec, 0x71, 0xce, 0x4e, 0xc5, 0xec, 0x19, 0xea, 0xa5, 0xab, 0xcb, 0xc7, 0xb0, 0x4a, 0x69,
	0x1d, 0x86, 0xb5, 0x17, 0x8f, 0xb4, 0x0a, 0x0d, 0x7f, 0x3c, 0x56, 0xc7, 0x00, 0x9b, 0xee, 0x1f,
	0x5b, 0xd0, 0xfa, 0x6c, 0x16, 0x8d, 0xe9, 0x4e, 0x71, 0xe4, 0x67, 0xc6, 0x7c, 0xb0, 0x8d, 0xb8,
	0x94, 0x27, 0xb1, 0xbe, 0x53, 0x60, 0x1b, 0x47, 0x3f, 0xe1, 0x69, 0x86, 0xb7, 0x22, 0x65, 0x07,
	0x0a, 0xc4, 0xd1, 0xc3, 0x28, 0x55, 0x86, 0x80, 0x4d, 0x0c, 0x90, 0xd9, 0xec, 0x68, 0x12, 0x87,
	0xb3, 0x31, 0x27, 0x73, 0xe8, 0x78, 0x39, 0x02, 0xd7, 0x15, 0xc4, 0x93, 0x89, 0x3f, 0x0d, 0x33,
	0x67, 0x89, 0xce, 0x9c, 0x81, 0xd9, 0x6d, 0x68, 0xf2, 0xe9, 0x49, 0xe6, 0xb4, 0x49, 0xb7, 0xaf,
	0xa0, 0x6e, 0x49, 0xcc, 0xad, 0xc7, 0xd3, 0x13, 0xa5, 0x50, 0x22, 0x40, 0x42, 0x3f, 0x1d, 0x65,
	0x4e, 0xa7, 0x4c, 0xb8, 0x9d, 0x8e, 0x34, 0x21, 0x12, 0xb0, 0xb7, 0x4b, 0xe1, 0xea, 0x52, 0x4e,
	0x5a, 0x15, 0xaa, 0x1e, 0x40, 0xd7, 0x4f, 0x45, 0x34, 0xf4, 0x03, 0xa1, 0x2d, 0xcc, 0xb1, 0x07,
	0x57, 0x5d, 0x92, 0x29, 0x27, 0x65, 0x6f, 0x42, 0x2b, 0xf0, 0x83, 0x63, 0xae, 0xb2, 0xae, 0xf5,
	0x9c, 0x67, 0x07, 0xd1, 0x92, 0x5e, 0x92, 0xe0, 0x3d, 0xc0, 0x2c, 0x67, 0xa1, 0x68, 0xf2, 0x10,
	0xba, 0x66, 0x79, 0x0b, 0x31, 0x7e, 0x8b, 0x08, 0xf6, 0x21, 0xac, 0x14, 0x57, 0xbd, 0x10, 0xf7,
	0xfb, 0x00, 0xf9, 0xfa, 0x17, 0x3a, 0x74, 0x7f, 0xa8, 0xc1, 0x12, 0x6d, 0x60, 0x86, 0xae, 0x20,
	0x13, 0xfe, 0x88, 0x6b, 0x17, 0xad, 0x20, 0xb6, 0x05, 0x4b, 0x47, 0x44, 0xa1, 0xae, 0xa2, 0x1b,
	0x66, 0xd3, 0x33, 0xf5, 0x51, 0xba, 0x95, 0x54, 0x83, 0x5d, 0xe8, 0x59, 0xe8, 0x0a, 0x69, 0x6e,
	0xd8, 0xd2, 0xf4, 0xee, 0x75, 0xcd, 0x78, 0xb6, 0x60, 0x5f, 0xd5, 0x60, 0x8d, 0x90, 0x7b, 0x98,
	0x8f, 0x9c, 0xe7, 0xfc, 0x19, 0x34, 0x67, 0x99, 0xb9, 0x49, 0x51, 0x1b, 0x27, 0x9d, 0x45, 0x21,
	0x1d, 0xa1, 0x96, 0x87, 0x4d, 0xa4, 0x12, 0xfe, 0x48, 0x96, 0x5a, 0xba, 0x1e, 0xb5, 0x99, 0x6b,
	0x56, 0xd6, 0x22, 0x49, 0x20, 0x5f, 0x99, 0x5e, 0x0d, 0x8e, 0x24, 0xfc, 0x54, 0x95, 0x09, 0xb0,
	0xe9, 0x72, 0xe8, 0x7d, 0x11, 0xc7, 0xe6, 0x92, 0x77, 0x03, 0x7a, 0xfe, 0x50, 0xf0, 0xf4, 0x30,
	0x13, 0x7e, 0x2a, 0xd4, 0xde, 0x01, 0xa1, 0x0e, 0x10, 0x83, 0x04, 0x47, 0x7c, 0x18, 0xa7, 0xfc,
	0x30, 0x13, 0x71, 0xa2, 0x2e, 0x6e, 0x20, 0x51, 0x07, 0x22, 0x4e, 0xf2, 0x00, 0xda, 0xb0, 0x03,
	0xa8, 0x00, 0xf6, 0x05, 0xf7, 0xc7, 0xe2, 0x78, 0xe7, 0x98, 0x07, 0x66, 0xb6, 0xab, 0xd0, 0x15,
	0x41, 0x72, 0x98, 0xc4, 0xa9, 0xd0, 0x7a, 0xea, 0x88, 0x20, 0xd9, 0x47, 0x18, 0x3b, 0x8f, 0x85,
	0x90, 0xbd, 0xda, 0x97, 0x21, 0x02, 0x7b, 0x69, 0x4b, 0xd2, 0xb1, 0xf2, 0x2a, 0xd8, 0xa4, 0x48,
	0x12, 0x87, 0x32, 0x1d, 0x69, 0x79, 0xd4, 0x76, 0x7f, 0x53, 0x03, 0x78, 0x1a, 0x8f, 0xac, 0xfd,
	0x16, 0xa7, 0x89, 0xd9, 0x6f, 0x6c, 0xb3, 0x7b, 0xb0, 0x14, 0xc4, 0xd3, 0x61, 0x34, 0x52, 0xf6,
	0x40, 0x59, 0x66, 0xce, 0x83, 0x29, 0xc9, 0x30, 0x1a, 0x29, 0x9b, 0x90, 0x94, 0x78, 0x32, 0x2c,
	0xf4, 0x42, 0x16, 0xfa, 0x97, 0x06, 0xac, 0x3d, 0x36, 0x79, 0xd4, 0x79, 0x86, 0xe0, 0x40, 0x5b,
	0x79, 0x38, 0x1d, 0x0f, 0x14, 0x58, 0x4a, 0xb6, 0x1b, 0x73, 0xc9, 0xf6, 0xbc, 0x6f, 0xbd, 0x09,
	0x8d, 0x71, 0x3c, 0x52, 0x76, 0xb1, 0x52, 0x5c, 0xa1, 0x87, 0x5d, 0x14, 0x07, 0x54, 0xb6, 0x2d,
	0xdd, 0xab, 0xc9, 0xa8, 0xdf, 0x87, 0xde, 0x31, 0x69, 0x2e, 0x40, 0xcd, 0x51, 0x0c, 0x56, 0xa7,
	0x66, 0x5e, 0xa1, 0x9e, 0x4d, 0xca, 0x36, 0xa1, 0x79, 0x1c, 0xc7, 0xcf, 0x29, 0x44, 0xf7, 0xee,
	0x5d, 0x24, 0x96, 0xdc, 0xd4, 0x3c, 0xea, 0x64, 0xaf, 0xc1, 0x4a, 0xca, 0xc9, 0xd8, 0x0e, 0x93,
	0x78, 0x1c, 0x05, 0x32, 0x74, 0x77, 0xbd, 0x65, 0x85, 0xdd, 0x27, 0x24, 0xfb, 0x10, 0xda, 0xd9,
	0x69, 0x16, 0x08, 0x13, 0xc2, 0x5d, 0x1c, 0x6e, 0x6e, 0x27, 0xb7, 0x0e, 0x24, 0x91, 0xba, 0x15,
	0x28, 0x16, 0xcc, 0xa8, 0xed, 0x8e, 0x85, 0x34, 0xf6, 0xfb, 0x0e, 0x2c, 0xcb, 0x44, 0xfa, 0x3c,
	0x6d, 0xbd, 0x37, 0x57, 0x52, 0x54, 0x51, 0x63, 0x4e, 0xc4, 0x42, 0x1e, 0x7d, 0x76, 0xa2, 0x74,
	0x5e, 0x86, 0x6d, 0x2e, 0x39, 0x2d, 0xfb, 0x92, 0xf3, 0x2a, 0x00, 0xff, 0x85, 0x48, 0xfd, 0x43,
	0x8a, 0x71, 0x32, 0x7b, 0xea, 0x12, 0x06, 0xfd, 0x3f, 0x1e, 0xa7, 0x20, 0x99, 0x1d, 0xca, 0x4b,
	0x5d, 0x9b, 0x92, 0xd4, 0x4e, 0x90, 0xcc, 0xfe, 0xbf, 0x74, 0xaf, 0xeb, 0x14, 0x12, 0xa7, 0x75,
	0x68, 0x05, 0xf1, 0x6c, 0x2a, 0x48, 0x29, 0x2d, 0x4f, 0x02, 0xb8, 0x7d, 0x7c, 0x7a, 0x42, 0x8a,
	0xe8, 0x7a, 0xd8, 0x24, 0x93, 0x9b, 0x66, 0x14, 0xc7, 0xd0, 0xe4, 0xa4, 0x23, 0x91, 0xd2, 0x1c,
	0xc7, 0x99, 0xc8, 0x9c, 0xbe, 0xf4, 0x13, 0x84, 0xfa, 0x02, 0x31, 0x94, 0x1b, 0xc4, 0xe3, 0xd9,
	0x84, 0x67, 0xce, 0xb2, 0xb4, 0x38, 0x05, 0xb2, 0x47, 0x56, 0xc5, 0x67, 0x85, 0x94, 0x7d, 0x03,
	0x77, 0xb2, 0xa0, 0x04, 0x5d, 0xff, 0x51, 0x9a, 0x36, 0x0c, 0xec, 0x26, 0xf4, 0x54, 0x7b, 0x82,
	0xde, 0xe0, 0x22, 0x6d, 0x83, 0x8d, 0x32, 0x1e, 0x76, 0xd5, 0xf2, 0xb0, 0xeb, 0xd0, 0x0a, 0xf9,
	0xd1, 0x6c, 0xe4, 0xac, 0x49, 0xa7, 0x45, 0x00, 0xa6, 0x24, 0x71, 0xc2, 0xa7, 0x07, 0x22, 0x8c,
	0xa6, 0x0e, 0x93, 0x29, 0x89, 0x41, 0xb0, 0xf7, 0x4c, 0x92, 0xf0, 0x0a, 0x09, 0xf9, 0xea, 0xbc,
	0x90, 0x55, 0xc9, 0xc2, 0x36, 0x00, 0x2a, 0x52, 0xb1, 0xae, 0x13, 0xeb, 0xad, 0x8a, 0xf5, 0x19,
	0x1a, 0xc9, 0x6e, 0x31, 0xb1, 0x4d, 0x58, 0x0e, 0x89, 0xf8, 0x70, 0xc2, 0xc5, 0x71, 0x1c, 0x3a,
	0x97, 0x68, 0x29, 0x7d, 0x89, 0x7c, 0x46, 0x38, 0xf6, 0x8e, 0xba, 0x86, 0x6d, 0xe4, 0xe5, 0xcd,
	0xe2, 0x0c, 0x78, 0xbd, 0xd5, 0x15, 0x51, 0x5f, 0xf8, 0x94, 0x80, 0xc5, 0x43, 0x31, 0x8e, 0x26,
	0x91, 0x70, 0x2e, 0xab, 0x04, 0x4c, 0x23, 0x50, 0x9f, 0x54, 0x0f, 0x39, 0x94, 0xfd, 0x0e, 0xd9,
	0x03, 0x09, 0x95, 0x3d, 0x45, 0xcc, 0xe0, 0x11, 0x2c, 0x17, 0x74, 0xf2, 0x7d, 0xe5, 0x1a, 0x1f,
	0xc1, 0xc5, 0xd2, 0x5e, 0x2d, 0x9a, 0x1e, 0x99, 0x8d, 0x78, 0x11, 0x63, 0xdf, 0xf6, 0x0b, 0xbf,
	0x6a, 0xe0, 0x9d, 0x30, 0x19, 0xfb, 0x81, 0x89, 0xe7, 0xef, 0x40, 0x37, 0xd4, 0x5b, 0x4c, 0x83,
	0xa8, 0xa2, 0x61, 0x61, 0xdf, 0xbd, 0x9c, 0xa6, 0xfa, 0xb2, 0xc9, 0xf6, 0x60, 0x79, 0x18, 0x8d,
	0x31, 0x08, 0x2b, 0x23, 0x91, 0x55, 0xf0, 0xff, 0xc2, 0xa1, 0x8a, 0x33, 0x6e, 0x7d, 0x4e, 0x74,
	0xb6, 0x99, 0xf5, 0x87, 0x16, 0x8a, 0xdd, 0xc5, 0xa0, 0x98, 0x9c, 0xaa, 0x0a, 0xe6, 0xb5, 0x8a,
	0x11, 0x76, 0xe2, 0x44, 0x15, 0xd2, 0x89, 0x52, 0xdf, 0x6b, 0x5b, 0xf9, 0xbd, 0xf6, 0x75, 0x58,
	0x51, 0xc7, 0x27, 0x9a, 0x1e, 0xf3, 0x34, 0x12, 0xe4, 0x5b, 0x3a, 0x5e, 0x09, 0x3b, 0xf8, 0x04,
	0xd6, 0xe6, 0xc4, 0x59, 0x54, 0x15, 0x46, 0x9a, 0x85, 0x5c, 0xf4, 0x0c, 0xd6, 0x28, 0x61, 0x2c,
	0x24, 0x57, 0x2f, 0x75, 0x47, 0x42, 0x47, 0x48, 0xde, 0x54, 0x6e, 0x7a, 0xd7, 0x53, 0x10, 0x3a,
	0x8d, 0x4c, 0xf0, 0x44, 0x67, 0x17, 0xd8, 0x76, 0x7f, 0x5d, 0x03, 0x26, 0xef, 0x78, 0xdf, 0xef,
	0xc4, 0xb8, 0x13, 0x49, 0x3a, 0x9b, 0xea, 0x6b, 0x92, 0x04, 0xdc, 0x5b, 0x72, 0xfb, 0xf6, 0x7d,
	0x71, 0x4c, 0x65, 0x8c, 0x04, 0x1b, 0x2a, 0xab, 0x92, 0x80, 0xfb, 0xdb, 0x1a, 0x66, 0x2e, 0x89,
	0x89, 0x64, 0x0f, 0xa0, 0x2d, 0xfc, 0x74, 0xc4, 0x85, 0xae, 0xc2, 0x5c, 0x93, 0x55, 0x18, 0x43,
	0xb1, 0xf5, 0x03, 0xd9, 0xad, 0xe2, 0xa9, 0x22, 0x1e, 0xec, 0x41, 0xdf, 0xee, 0xa8, 0x50, 0xd6,
	0x66, 0x31, 0x2b, 0x5e, 0xd6, 0xe3, 0x92, 0x74, 0xb6, 0xee, 0x1e, 0x41, 0xef, 0x71, 0x9a, 0xc6,
	0xa9, 0x7c, 0xab, 0x30, 0x59, 0x5c, 0x8d, 0xc2, 0x10, 0xb5, 0x71, 0x43, 0x27, 0xf2, 0x95, 0x4d,
	0x67, 0x42, 0x0a, 0x74, 0xff, 0x5a, 0x48, 0xab, 0xf5, 0x53, 0x5c, 0xb9, 0xcc, 0x25, 0xaf, 0x02,
	0x62, 0x96, 0xe9, 0xe7, 0x09, 0x09, 0xa1, 0x3a, 0x92, 0x34, 0x1e, 0xa5, 0x3c, 0xcb, 0x74, 0xf1,
	0x54, 0xc3, 0xb8, 0x7f, 0x1c, 0xc5, 0x52, 0xb1, 0x57, 0x02, 0x72, 0xa4, 0x94, 0xfb, 0x13, 0x15,
	0x79, 0x15, 0xc4, 0xee, 0x41, 0x9f, 0x08, 0x0e, 0xd5, 0x93, 0xd2, 0x52, 0x9e, 0xf1, 0x58, 0x8b,
	0xf3, 0x7a, 0x3c, 0x07, 0xdc, 0x7f, 0x34, 0x60, 0x63, 0x27, 0xe5, 0xbe, 0xc8, 0xab, 0x52, 0x7a,
	0x01, 0x2f, 0x67, 0x41, 0x72, 0xd9, 0x0d, 0xfb, 0x4d, 0x70, 0xae, 0xfe, 0x6b, 0x96, 0xd5, 0xb2,
	0x97, 0x45, 0x0f, 0x31, 0x41, 0x80, 0xfb, 0x20, 0x8f, 0xb6, 0x06, 0xd9, 0x7b, 0xba, 0xf0, 0x82,
	0xc6, 0xb1, 0x49, 0x4a, 0xac, 0x14, 0xf9, 0xac, 0xe2, 0x71, 0xa7, 0xba, 0x78, 0x5c, 0xac, 0xce,
	0x6c, 0x97, 0x2b, 0xbd, 0xb7, 0xcf, 0x99, 0xa8, 0xba, 0xec, 0xcb, 0x54, 0xaa, 0xd9, 0x93, 0x35,
	0x47, 0x6c, 0xbf, 0x74, 0xe5, 0xf6, 0xdb, 0x94, 0x5f, 0xbf, 0xaa, 0xc1, 0x65, 0xe5, 0x60, 0xe7,
	0xb4, 0x8a, 0x37, 0x0d, 0x5a, 0x93, 0x0a, 0x0d, 0x83, 0xb3, 0x57, 0xe9, 0x29, 0x4a, 0xe4, 0x49,
	0xc9, 0xc3, 0xa8, 0x73, 0x34, 0x90, 0x1e, 0xbc, 0x50, 0xcb, 0x34, 0x3c, 0x92, 0x32, 0xd7, 0x71,
	0xc3, 0xd2, 0xb1, 0xfb, 0xbf, 0xb0, 0xe6, 0xcd, 0xa6, 0xdb, 0xd3, 0xf0, 0xc7, 0x7e, 0x24, 0xb4,
	0x48, 0xb7, 0xa0, 0x6f, 0xea, 0xac, 0x87, 0xe6, 0xcc, 0xf4, 0x0c, 0x6e, 0x2f, 0x7f, 0x59, 0xae,
	0x5b, 0xd5, 0xdc, 0x53, 0xdb, 0xdf, 0xea, 0xb1, 0x4c, 0x52, 0x5a, 0x2b, 0x55, 0xde, 0xb5, 0x69,
	0xd5, 0x8b, 0xa6, 0x75, 0xde, 0xd3, 0x85, 0x75, 0xe2, 0x9b, 0xc5, 0x13, 0xff, 0xd3, 0x82, 0xcb,
	0xfd, 0x16, 0x73, 0xab, 0x01, 0xb5, 0xbb, 0x35, 0xb0, 0xfb, 0xa3, 0xb9, 0x62, 0xf1, 0x59, 0x7e,
	0xe5, 0xec, 0xf1, 0xb5, 0x39, 0xaa, 0x5a, 0x2d, 0xb6, 0xdd, 0xcf, 0x70, 0x5c, 0x2a, 0x21, 0xeb,
	0x27, 0xe6, 0x85, 0xc7, 0x75, 0x7f, 0xa9, 0xfc, 0xf7, 0xa2, 0x9e, 0x4e, 0xbb, 0x82, 0x46, 0xb1,
	0xd0, 0x80, 0x41, 0x41, 0xbb, 0x07, 0x6c, 0x9f, 0xe1, 0x1e, 0xaa, 0x7e, 0x2e, 0xf8, 0x89, 0x6d,
	0x4e, 0x3a, 0x9c, 0x3c, 0x2c, 0xdd, 0x94, 0xce, 0xce, 0x81, 0x4a, 0x37, 0xaa, 0x55, 0x68, 0xec,
	0x4c, 0x42, 0x65, 0x63, 0xd8, 0x74, 0x3f, 0x81, 0xcb, 0xb8, 0xff, 0x69, 0x3c, 0xfe, 0x06, 0x35,
	0x7b, 0x7d, 0xaf, 0xaf, 0xe7, 0xf7, 0x7a, 0xf7, 0x60, 0x7e, 0x80, 0xb3, 0x76, 0xcd, 0xac, 0xba,
	0x5e, 0x5a, 0xb5, 0xd1, 0xa1, 0x72, 0x29, 0xf7, 0xbe, 0xee, 0x43, 0x7b, 0x27, 0x4e, 0xb9, 0xb7,
	0xbf, 0xc3, 0x6e, 0x41, 0xe7, 0x69, 0x94, 0x09, 0xfa, 0x3b, 0x82, 0x8a, 0x3e, 0xf4, 0xdb, 0xcd,
	0xa0, 0xa3, 0xfe, 0x23, 0xc8, 0xdc, 0x0b, 0xec, 0x75, 0x58, 0x92, 0xd5, 0x7e, 0xb6, 0xa6, 0x0a,
	0xce, 0x79, 0x09, 0x7e, 0xa0, 0xff, 0xa1, 0x70, 0x2f, 0xb0, 0x2d, 0xe8, 0x9a, 0x32, 0x3e, 0x5b,
	0xcf, 0x8f, 0xb8, 0x45, 0x9d, 0xcf, 0x20, 0xc7, 0x95, 0xe5, 0x7c, 0x39, 0x6e, 0xa1, 0xb4, 0x6f,
	0x8f, 0xfb, 0x80, 0x0a, 0xc7, 0xf6, 0x9f, 0x19, 0x15, 0xf4, 0x17, 0x4b, 0x3f, 0x3e, 0xb8, 0x17,
	0xd8, 0x1b, 0xd0, 0x56, 0xc5, 0x71, 0xc6, 0xe6, 0x2b, 0xe5, 0x03, 0xf3, 0x44, 0x4a, 0xa2, 0x43,
	0x5e, 0xe6, 0x66, 0x97, 0x72, 0xd9, 0x6d, 0x06, 0x4b, 0xa4, 0x77, 0x61, 0xf5, 0x40, 0xd6, 0xb2,
	0xf3, 0x07, 0x55, 0xf3, 0xb0, 0x6e, 0x50, 0x85, 0x29, 0xde, 0x80, 0xb6, 0x2a, 0x7f, 0x4b, 0x69,
	0x8a, 0xb5, 0xf0, 0x02, 0xe9, 0x5d, 0xe8, 0x3f, 0xe1, 0xf9, 0x0f, 0x47, 0xec, 0x62, 0xe1, 0x51,
	0x69, 0x6f, 0x77, 0x50, 0x7c, 0x65, 0x72, 0x2f, 0xb0, 0xfb, 0xf4, 0x32, 0x62, 0xbd, 0x4d, 0xad,
	0x96, 0x58, 0xb2, 0xc1, 0x4a, 0x01, 0x83, 0x7a, 0x7d, 0x87, 0x98, 0x70, 0xce, 0xcf, 0x4e, 0xbf,
	0xa4, 0xb3, 0xf4, 0x02, 0xb9, 0xde, 0x85, 0xbe, 0xb2, 0x15, 0xf9, 0xe6, 0xbc, 0xae, 0xff, 0x8d,
	0xb2, 0x6b, 0xf1, 0x52, 0xc7, 0x84, 0x21, 0xdd, 0xf5, 0xad, 0x7f, 0x30, 0x32, 0xb6, 0x61, 0x58,
	0x0a, 0x7f, 0x65, 0x0c, 0xfa, 0xd6, 0xcf, 0x10, 0xc8, 0xf7, 0x11, 0xac, 0x14, 0x7f, 0xba, 0x62,
	0x57, 0xce, 0xfc, 0x11, 0xab, 0x62, 0x69, 0x1f, 0xa8, 0x5f, 0x3f, 0xe2, 0x90, 0x5b, 0x43, 0x54,
	0xad, 0x6f, 0x9e, 0xf7, 0x63, 0x58, 0x9b, 0x7b, 0x7a, 0x64, 0xd7, 0x0a, 0x64, 0xa5, 0x17, 0xc9,
	0xa2, 0x59, 0xbf, 0x05, 0x4d, 0x74, 0x6e, 0x5a, 0x6b, 0x26, 0x09, 0x1d, 0x18, 0x84, 0x3a, 0xc1,
	0xee, 0x85, 0xbb, 0x35, 0xf6, 0x31, 0x40, 0x9e, 0xfa, 0xb1, 0xbc, 0x42, 0x6f, 0xe7, 0xe2, 0x83,
	0x12, 0xba, 0xc4, 0x9f, 0x07, 0x31, 0xc9, 0x3f, 0x77, 0x89, 0x18, 0x94, 0xd0, 0x36, 0xff, 0x36,
	0xf4, 0xac, 0x48, 0x24, 0xf5, 0x33, 0x7f, 0x1b, 0x18, 0x94, 0xf1, 0xf6, 0x10, 0xbb, 0xd0, 0xb7,
	0x7f, 0x25, 0x63, 0x97, 0x73, 0x47, 0x59, 0xf8, 0x95, 0x6d, 0x30, 0xd7, 0x61, 0x8f, 0xf2, 0x29,
	0x40, 0xee, 0x8a, 0xd5, 0x11, 0x2c, 0xbb, 0xe6, 0x41, 0x09, 0x6d, 0xf8, 0xef, 0xd4, 0x48, 0x8e,
	0x8b, 0xa5, 0x3c, 0x84, 0xcd, 0xfb, 0xec, 0xc1, 0x39, 0xf9, 0x0a, 0xc9, 0xf1, 0x04, 0x56, 0xcb,
	0xa9, 0x8f, 0x34, 0x9c, 0xe2, 0x8d, 0x73, 0x70, 0xd5, 0xc2, 0x55, 0x0e, 0xf4, 0x0c, 0x2e, 0x96,
	0x22, 0x30, 0xab, 0xca, 0x7b, 0x0a, 0x72, 0x55, 0x87, 0x6c, 0x1a, 0x6e, 0x1f, 0x56, 0xcb, 0x91,
	0x80, 0x5d, 0xd5, 0x56, 0x59, 0x11, 0x60, 0x06, 0x95, 0x9d, 0xf6, 0x88, 0x8f, 0x51, 0xc0, 0x42,
	0x28, 0xd7, 0x0b, 0xb5, 0x9f, 0x88, 0xb5, 0x60, 0x55, 0x31, 0x1f, 0x87, 0x39, 0x5a, 0xa2, 0xbf,
	0x36, 0xef, 0xff, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xcd, 0xf9, 0x1a, 0x2f, 0xc3, 0x29, 0x00, 0x00,
}
